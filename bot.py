# -*- coding: utf-8 -*-
"""
BEST VEO3 bot ‚Äî Webhook + –≤—ã–±–æ—Ä Fast/Quality + 16:9/9:16 + –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ KIE API
PTB v20+

ENV (Render ‚Üí Environment):
  TELEGRAM_TOKEN=xxx
  PUBLIC_URL=https://best-veo3-bot-xxxx.onrender.com
  KIE_API_KEY=xxx
  KIE_BASE_URL=https://api.kie.ai
  KIE_GENERATE_PATH=/api/v1/veo/generate
  BOT_MODEL=veo3_fast   # –ª–∏–±–æ 'veo3' (Quality)
"""

import os
import json
import logging
from typing import Dict, Any, List, Optional

import requests
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, MessageEntity, InputFile
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ---------------- LOG ----------------
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("best-veo3")

# ---------------- ENV ----------------
TOKEN        = os.getenv("TELEGRAM_TOKEN", "")
PUBLIC_URL   = os.getenv("PUBLIC_URL", "").rstrip("/")
KIE_API_KEY  = os.getenv("KIE_API_KEY", "")
KIE_BASE_URL = os.getenv("KIE_BASE_URL", "https://api.kie.ai").rstrip("/")
RAW_PATH     = os.getenv("KIE_GENERATE_PATH", "/api/v1/veo/generate").strip()
DEFAULT_MODEL= os.getenv("BOT_MODEL", "veo3_fast").strip()  # 'veo3' or 'veo3_fast'

PORT         = int(os.getenv("PORT", "5000"))

if not TOKEN or not PUBLIC_URL:
    log.error("TELEGRAM_TOKEN –∏–ª–∏ PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –±–æ—Ç –Ω–µ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è.")

# --------- helpers: normalize API path ----------
def _normalize_path(p: str) -> str:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤–∏–¥–∞ /api/.... (–Ω–∞ —Å–ª—É—á–∞–π –æ–ø–µ—á–∞—Ç–æ–∫)"""
    p = p.strip()
    if not p.startswith("/"):
        p = "/" + p
    if p.startswith("/v1/") or p.startswith("/veo/") or p.startswith("/api/"):
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª '/v1/...' ‚Äî –¥–æ–±–∞–≤–∏–º '/api' —Å–ø–µ—Ä–µ–¥–∏
        if p.startswith("/v1/") or p.startswith("/veo/"):
            p = "/api" + p
    return p

API_PATH = _normalize_path(RAW_PATH)
KIE_URL  = f"{KIE_BASE_URL}{API_PATH}"

# --------- per-user state ----------
# format: { user_id: {"aspect": "16:9"|"9:16", "model": "veo3_fast"|"veo3"} }
STATE: Dict[int, Dict[str, str]] = {}

def get_state(user_id: int) -> Dict[str, str]:
    st = STATE.setdefault(user_id, {"aspect": "16:9", "model": DEFAULT_MODEL})
    return st

# --------- keyboards ----------
def kb_aspect(current: str) -> InlineKeyboardMarkup:
    b16 = "‚úÖ 16:9" if current == "16:9" else "16:9"
    b916 = "‚úÖ 9:16" if current == "9:16" else "9:16"
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(b16, callback_data="aspect:16:9"),
          InlineKeyboardButton(b916, callback_data="aspect:9:16")]]
    )

def kb_model(current: str) -> InlineKeyboardMarkup:
    # veo3 = Quality; veo3_fast = Fast
    fast = "‚úÖ Fast (veo3_fast)" if current == "veo3_fast" else "Fast (veo3_fast)"
    qual = "‚úÖ Quality (veo3)" if current == "veo3" else "Quality (veo3)"
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(fast, callback_data="model:veo3_fast"),
          InlineKeyboardButton(qual, callback_data="model:veo3")]]
    )

def kb_main(current_aspect: str, current_model: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(f"–§–æ—Ä–º–∞—Ç: {current_aspect}", callback_data="open:aspect")],
            [InlineKeyboardButton(
                "–†–µ–∂–∏–º: Fast ‚ö°" if current_model == "veo3_fast" else "–†–µ–∂–∏–º: Quality üé¨",
                callback_data="open:model"
            )],
        ]
    )

# --------- KIE call ----------
def send_to_kie(prompt: str, aspect: str, model: str,
                image_urls: Optional[List[str]] = None,
                seed: Optional[int] = None,
                enable_fallback: bool = False) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON KIE. –ü–æ–¥–Ω–∏–º–∞–µ–º —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏.
    """
    payload: Dict[str, Any] = {
        "prompt": prompt,
        "model": model,                  # 'veo3' (quality) –∏–ª–∏ 'veo3_fast' (fast)
        "aspectRatio": aspect,           # "16:9" | "9:16" (—É –Ω–∏—Ö camelCase)
        "enableFallback": bool(enable_fallback),
    }
    if image_urls:
        payload["imageUrls"] = image_urls
    if seed is not None:
        payload["seed"] = int(seed)

    headers = {
        "Authorization": f"Bearer {KIE_API_KEY}",
        "Content-Type": "application/json",
    }

    log.info("KIE POST %s | payload: %s", KIE_URL, json.dumps(payload, ensure_ascii=False))
    r = requests.post(KIE_URL, headers=headers, json=payload, timeout=60)
    txt = r.text
    log.info("KIE %s -> %s", r.status_code, txt[:500])

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–ª–æ –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ-200
    try:
        data = r.json()
    except Exception:
        data = {"code": r.status_code, "msg": txt}

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
    if r.status_code == 401:
        raise RuntimeError("API 401: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç KIE_API_KEY.")
    if r.status_code == 402:
        raise RuntimeError("API 402: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ KIE.")
    if r.status_code == 404:
        raise RuntimeError("API 404: —ç–Ω–¥–ø–æ–π–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å KIE_BASE_URL –∏ KIE_GENERATE_PATH).")
    if r.status_code >= 500:
        raise RuntimeError(f"API {r.status_code}: —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ KIE.")

    # –í –∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ ¬´—É—Å–ø–µ—Ö¬ª –±—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ JSON: {"code":200, data:{taskId:...}}
    code = data.get("code", r.status_code)
    if code != 200:
        msg = data.get("msg") or data.get("message") or "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        raise RuntimeError(f"API code {code}: {msg}")

    return data

# --------- handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    st = get_state(u.id)
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ-–∏–¥–µ—é (–ø—Ä–æ–º–ø—Ç) –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî "
        "–∞ —è –æ—Ç–ø—Ä–∞–≤–ª—é –∑–∞–¥–∞—á—É –≤ VEO3.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(
        text,
        reply_markup=kb_main(st["aspect"], st["model"])
    )

async def open_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∞—Å–ø–µ–∫—Ç–æ–≤/–º–æ–¥–µ–ª–∏"""
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    st = get_state(uid)

    _, what = q.data.split(":", 1)
    if what == "aspect":
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:",
            reply_markup=kb_aspect(st["aspect"])
        )
    elif what == "model":
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:",
            reply_markup=kb_model(st["model"])
        )

async def set_aspect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    _, val = q.data.split(":", 1)  # "aspect:16:9" -> val="16:9"
    get_state(uid)["aspect"] = val
    st = get_state(uid)
    await q.edit_message_text(
        f"–§–æ—Ä–º–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val}\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ø—Ä–æ–º–ø—Ç.",
        reply_markup=kb_main(st["aspect"], st["model"])
    )

async def set_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    _, val = q.data.split(":", 1)  # "model:veo3_fast"
    get_state(uid)["model"] = val
    st = get_state(uid)
    lab = "Fast ‚ö° (veo3_fast)" if val == "veo3_fast" else "Quality üé¨ (veo3)"
    await q.edit_message_text(
        f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lab}\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ø—Ä–æ–º–ø—Ç.",
        reply_markup=kb_main(st["aspect"], st["model"])
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = get_state(uid)
    await update.message.reply_text(
        "–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:",
        reply_markup=kb_main(st["aspect"], st["model"])
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç–æ–º –∏ —à–ª–µ–º –≤ KIE"""
    uid = update.effective_user.id
    st = get_state(uid)
    prompt = update.message.text.strip()
    if not prompt:
        return

    await update.message.reply_text(
        f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É...\n"
        f"–§–æ—Ä–º–∞—Ç: {st['aspect']} ‚Ä¢ –†–µ–∂–∏–º: {'Fast' if st['model']=='veo3_fast' else 'Quality'}"
    )
    try:
        data = send_to_kie(prompt=prompt, aspect=st["aspect"], model=st["model"])
        task_id = (data.get("data") or {}).get("taskId") or "unknown"
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ID: `{task_id}`\n"
            f"–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä –∑–∞–Ω–∏–º–∞–µ—Ç 2‚Äì5 –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:\n{e}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –¥–µ—Ä–Ω—É—Ç—å file URL —Ç–µ–ª–µ–≥–∏ –∏ –¥–∞—Ç—å –∫–∞–∫ imageUrls"""
    uid = update.effective_user.id
    st = get_state(uid)

    caption = update.message.caption or ""
    if not caption.strip():
        await update.message.reply_text("–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ ‚Äî —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–º–ø—Ç.")
        return

    # –ë–µ—Ä—ë–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]
    f = await context.bot.get_file(photo.file_id)
    # –ü—Ä—è–º–æ–π URL –∫ —Ñ–∞–π–ª—É —Ç–µ–ª–µ–≥–∏
    tg_file_url = f"https://api.telegram.org/file/bot{TOKEN}/{f.file_path}"

    await update.message.reply_text(
        f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é (img2vid)...\n"
        f"–§–æ—Ä–º–∞—Ç: {st['aspect']} ‚Ä¢ –†–µ–∂–∏–º: {'Fast' if st['model']=='veo3_fast' else 'Quality'}"
    )
    try:
        data = send_to_kie(
            prompt=caption.strip(),
            aspect=st["aspect"],
            model=st["model"],
            image_urls=[tg_file_url]
        )
        task_id = (data.get("data") or {}).get("taskId") or "unknown"
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ID: `{task_id}`\n"
            f"–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä –∑–∞–Ω–∏–º–∞–µ—Ç 2‚Äì5 –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:\n{e}")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
        "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –∑–∞–ø—É—â—É —Ç–µ–∫—Å—Ç‚Üí–≤–∏–¥–µ–æ\n"
        "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –∑–∞–ø—É—â—É image‚Üí–≤–∏–¥–µ–æ"
    )

# --------- main / webhook ----------
def main():
    app = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("help", help_cmd))

    # –≤—ã–±–æ—Ä –≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞—Ö
    app.add_handler(CallbackQueryHandler(open_panel, pattern=r"^open:(aspect|model)$"))
    app.add_handler(CallbackQueryHandler(set_aspect, pattern=r"^aspect:(16:9|9:16)$"))
    app.add_handler(CallbackQueryHandler(set_model,  pattern=r"^model:(veo3_fast|veo3)$"))

    # –∫–æ–Ω—Ç–µ–Ω—Ç
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ Webhook (Render Web Service)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"{PUBLIC_URL}/{TOKEN}",
    )

if __name__ == "__main__":
    main()
