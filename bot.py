# -*- coding: utf-8 -*-
# BEST VEO3 BOT ‚Äî polling-only, Kie API (/api/v1/veo/*), Fast/Quality toggle
# 2025-09-06

import os, json, logging, traceback, requests, asyncio
from typing import Dict, Any, Optional

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ----------------- ENV & LOGGING -----------------
load_dotenv()

TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN", "")
KIE_API_KEY     = os.getenv("KIE_API_KEY", "")
KIE_BASE_URL    = os.getenv("KIE_BASE_URL", "https://api.kie.ai").rstrip("/")
# –ø—É—Ç–∏ Kie (–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
KIE_GENERATE_PATH = os.getenv("KIE_GENERATE_PATH", "/api/v1/veo/generate")
KIE_RECORD_PATH   = os.getenv("KIE_RECORD_PATH", "/api/v1/veo/record-info")

# –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: veo3 (Quality) –∏–ª–∏ veo3_fast (Fast)
DEFAULT_MODEL   = os.getenv("BOT_MODEL", "veo3").strip() or "veo3"

LOG_LEVEL       = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
log = logging.getLogger("best-veo3")

# ----------------- UI -----------------
def kb_main(model_label: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé¨ –¢–µ–∫—Å—Ç ‚Üí –≤–∏–¥–µ–æ", callback_data="gen_text")],
        [InlineKeyboardButton("üñºÔ∏è –§–æ—Ç–æ ‚Üí –≤–∏–¥–µ–æ", callback_data="gen_photo")],
        [InlineKeyboardButton("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä", callback_data="prompt_master")],
        [InlineKeyboardButton("‚ö° –†–µ–∂–∏–º: " + model_label, callback_data="toggle_model")],
        [InlineKeyboardButton("‚ùì FAQ", callback_data="faq")],
    ])

FORMAT_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("16:9", callback_data="fmt_16x9"),
     InlineKeyboardButton("9:16", callback_data="fmt_9x16")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_menu")],
])

RUN_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="run")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_menu")],
])

# ----------------- STATE -----------------
def _model_label(m: str) -> str:
    return "Quality (veo3)" if m == "veo3" else "Fast (veo3_fast)"

def userstate(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    if "state" not in ctx.user_data:
        ctx.user_data["state"] = {
            "mode": None,                # gen_text | gen_photo | prompt_master
            "aspect": "16:9",
            "prompt": None,
            "image_url": None,
            "model": DEFAULT_MODEL,      # veo3 | veo3_fast
            "_typing_stop": None,
        }
    return ctx.user_data["state"]

# ----------------- HELPERS -----------------
def looks_like_ready_prompt(text: str) -> bool:
    if not text:
        return False
    t = text.strip()
    if t.startswith("{") and t.endswith("}"):
        return True
    score = 0
    for kw in ("fps","lens","anamorphic","rack focus","lighting","bokeh","camera",
               "push-in","dolly","glide","35mm","85mm","shot","scene"):
        if kw in t.lower():
            score += 1
    return score >= 3 or len(t) > 400

async def _typing_loop(chat_id: int, ctx: ContextTypes.DEFAULT_TYPE, stop_event: asyncio.Event):
    try:
        while not stop_event.is_set():
            await ctx.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(4)
    except Exception:
        pass

def _kie_headers() -> Dict[str, str]:
    return {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type": "application/json"}

def _kie_url(path: str) -> str:
    return f"{KIE_BASE_URL}{path}"

def _map_api_error(status: int, body_text: str) -> str:
    # –î—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º —Å—Ç–∞—Ç—É—Å–∞
    mapping = {
        400: "–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ 1080p. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —á—É—Ç—å –ø–æ–∑–∂–µ.",
        401: "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å KIE_API_KEY.",
        402: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ Kie AI.",
        404: "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å /api/v1/veo/generate.",
        422: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É (Validation Error).",
        429: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
        455: "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ).",
        500: "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞.",
        501: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ.",
        505: "–§—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–∞ (disabled).",
    }
    base = mapping.get(status, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API ({status})")
    return f"{base}\n–û—Ç–≤–µ—Ç: {body_text[:300]}"

# ----------------- KIE SUBMIT -----------------
def submit_text_job(prompt: str, aspect: str, model: str, enable_fallback: bool=False) -> Dict[str, Any]:
    payload = {
        "prompt": prompt,
        "model": model,                      # veo3 | veo3_fast
        "aspectRatio": "16:9" if aspect == "16:9" else "9:16",
        "enableFallback": bool(enable_fallback),
    }
    try:
        r = requests.post(_kie_url(KIE_GENERATE_PATH), headers=_kie_headers(),
                          data=json.dumps(payload), timeout=30)
        if r.status_code == 200:
            data = r.json()
            return {"ok": True, "task_id": data.get("data",{}).get("taskId") or data.get("taskId") or "unknown"}
        return {"ok": False, "error": _map_api_error(r.status_code, r.text)}
    except Exception as e:
        return {"ok": False, "error": f"–°–µ—Ç—å/—Ç–∞–π–º–∞—É—Ç: {e}"}

def submit_photo_job(image_url: str, prompt: str, aspect: str, model: str, enable_fallback: bool=False) -> Dict[str, Any]:
    payload = {
        "prompt": prompt,
        "imageUrls": [image_url],
        "model": model,
        "aspectRatio": "16:9" if aspect == "16:9" else "9:16",
        "enableFallback": bool(enable_fallback),
    }
    try:
        r = requests.post(_kie_url(KIE_GENERATE_PATH), headers=_kie_headers(),
                          data=json.dumps(payload), timeout=30)
        if r.status_code == 200:
            data = r.json()
            return {"ok": True, "task_id": data.get("data",{}).get("taskId") or data.get("taskId") or "unknown"}
        return {"ok": False, "error": _map_api_error(r.status_code, r.text)}
    except Exception as e:
        return {"ok": False, "error": f"–°–µ—Ç—å/—Ç–∞–π–º–∞—É—Ç: {e}"}

# ----------------- HANDLERS -----------------
async def /start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = userstate(ctx); st["mode"] = None
    await update.effective_chat.send_message(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Veo 3. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç. "
        "–ú–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å: **Quality** (veo3) –∏–ª–∏ **Fast** (veo3_fast).",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb_main(_model_label(st["model"]))
    )
    await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:", reply_markup=FORMAT_KB)

# (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–µ—à–∞ ‚Äî –¥—É–±–ª–∏—Ä—É–µ–º)
async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    await /start(update, ctx)

async def cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    st = userstate(ctx)
    data = q.data

    if data == "back_menu":
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main(_model_label(st["model"])))
        return

    if data == "toggle_model":
        st["model"] = "veo3_fast" if st["model"] == "veo3" else "veo3"
        await q.edit_message_text(f"–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: **{_model_label(st['model'])}**",
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=kb_main(_model_label(st["model"])))
        return

    if data.startswith("fmt_"):
        st["aspect"] = "16:9" if data == "fmt_16x9" else "9:16"
        await q.edit_message_text(f"‚úÖ –§–æ—Ä–º–∞—Ç: {st['aspect']}.", reply_markup=RUN_KB)
        return

    if data == "faq":
        await q.edit_message_text(
            "üìñ FAQ\n‚Ä¢ –ú–æ–¥–µ–ª–∏: `veo3` (Quality), `veo3_fast` (Fast)\n"
            "‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 16:9 –∏–ª–∏ 9:16\n‚Ä¢ 1080p –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è 16:9\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–µ–Ω fallback (–≤–∫–ª. –∞–¥–º–∏–Ω–æ–º)\n‚Ä¢ –°—Ç–∞—Ç—É—Å—ã 402 = –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=RUN_KB
        ); return

    if data == "gen_text":
        st["mode"] = "gen_text"; st["image_url"] = None
        await q.edit_message_text(
            "‚úçÔ∏è –ü—Ä–∏—à–ª–∏ **–∏–¥–µ—é –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç**. –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ ‚Äî —è –Ω–µ –±—É–¥—É –µ–≥–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å.",
            reply_markup=FORMAT_KB
        ); return

    if data == "gen_photo":
        st["mode"] = "gen_photo"
        await q.edit_message_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ **—Ñ–æ—Ç–æ**. –ú–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç –±–∞–∑–æ–π –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞.",
            reply_markup=FORMAT_KB
        ); return

    if data == "prompt_master":
        st["mode"] = "prompt_master"; st["image_url"] = None
        await q.edit_message_text("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä –≤–∫–ª—é—á—ë–Ω. –û–ø–∏—à–∏ –∏–¥–µ—é 1‚Äì2 —Ñ—Ä–∞–∑–∞–º–∏.", reply_markup=FORMAT_KB)
        return

    if data == "run":
        if not st.get("prompt"):
            await q.answer("–ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.", show_alert=True); return
        await q.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Veo‚Ä¶")

        if st["mode"] == "gen_photo" and st.get("image_url"):
            res = submit_photo_job(st["image_url"], st["prompt"], st["aspect"], st["model"])
        else:
            res = submit_text_job(st["prompt"], st["aspect"], st["model"])

        if res["ok"]:
            await q.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! `taskId = {res['task_id']}`\n–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä 2‚Äì5 –º–∏–Ω—É—Ç.",
                parse_mode=ParseMode.MARKDOWN, reply_markup=RUN_KB
            )
        else:
            await q.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:\n{res['error']}", reply_markup=RUN_KB)
        return

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = userstate(ctx)
    text = (update.message.text or "").strip()
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä = –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –∏–¥–µ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—Å—Ç–æ —É—Å–∏–ª–∏–≤–∞–µ–º –µ—ë.
    if st["mode"] == "prompt_master":
        notice = await update.message.reply_text("‚åõ –ü–∏—à—É –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç‚Ä¶")
        # –∏–º–∏—Ç–∞—Ü–∏—è ¬´–Ω–∞–±–∏—Ä–∞–µ—Ç¬ª (–±–µ–∑ OpenAI ‚Äî —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å)
        stop = asyncio.Event(); st["_typing_stop"] = stop
        asyncio.create_task(_typing_loop(chat_id, ctx, stop))
        try:
            # —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API)
            prompt = (
                f"{text}\n\n"
                "Camera: smooth push-in, natural DOF, subtle rack-focus. "
                "Lens: 35mm/85mm mix, gentle bokeh. Lighting: soft, cinematic, "
                "warm highlights and cool shadows. Details: micro-particles, "
                "skin speculars, cloth texture, breathing room. "
                "Sound: light ambience, airy foley; no logos or text in frame."
            )
            st["prompt"] = prompt
            stop.set()
            await notice.edit_text("‚úÖ –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ñ–º–∏ ¬´üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.",
                                   reply_markup=RUN_KB)
        except Exception as e:
            stop.set()
            await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

    # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–º
    if st["mode"] in (None, "gen_text", "gen_photo"):
        if st["mode"] == "gen_photo" and not st.get("image_url"):
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç."); return

        if looks_like_ready_prompt(text):
            st["prompt"] = text
            await update.message.reply_text("‚úÖ –ü—Ä–∏–Ω—è–ª –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç. –ñ–º–∏ ¬´üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.",
                                            reply_markup=RUN_KB)
            return

        notice = await update.message.reply_text("‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç‚Ä¶")
        stop = asyncio.Event(); st["_typing_stop"] = stop
        asyncio.create_task(_typing_loop(chat_id, ctx, stop))
        try:
            # –ª—ë–≥–∫–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤)
            st["prompt"] = (
                f"{text}\n\n"
                "Cinematic composition, motivated lighting, gentle camera motion (dolly / push-in), "
                "realistic textures, no on-screen text or logos."
            )
            stop.set()
            await notice.edit_text("‚úÖ –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤. –ñ–º–∏ ¬´üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.", reply_markup=RUN_KB)
        except Exception as e:
            stop.set()
            await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = userstate(ctx); chat_id = update.effective_chat.id
    try:
        photo = update.message.photo[-1]
        f = await ctx.bot.get_file(photo.file_id)
        image_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{f.file_path}"
        st["image_url"] = image_url
        caption = (update.message.caption or "").strip()

        if caption:
            notice = await update.message.reply_text("üì∏ –ü—Ä–∏–Ω—è–ª —Ñ–æ—Ç–æ. –ü–∏—à—É –ø—Ä–æ–º–ø—Ç‚Ä¶")
            stop = asyncio.Event(); st["_typing_stop"] = stop
            asyncio.create_task(_typing_loop(chat_id, ctx, stop))
            st["prompt"] = (
                f"{caption}\n\n"
                "Keep subject fidelity. Natural light, smooth parallax, true-to-photo colors, "
                "no text/logos in frame."
            )
            stop.set()
            await notice.edit_text("‚úÖ –§–æ—Ç–æ –∏ –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤—ã. –ñ–º–∏ ¬´üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.", reply_markup=RUN_KB)
        else:
            await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã.",
                                            reply_markup=RUN_KB)
            st["mode"] = "gen_photo"
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}")

async def exit_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text("–û–∫, –≤—ã—Ö–æ–¥–∏–º. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await /start(update, ctx)

async def error_handler(update: Optional[Update], ctx: ContextTypes.DEFAULT_TYPE):
    log.error("Exception:\n%s", traceback.format_exc())
    try:
        if update and update.effective_chat:
            await update.effective_chat.send_message("‚ö†Ô∏è –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except:
        pass

# ----------------- MAIN -----------------
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
    if not KIE_API_KEY:
        log.warning("KIE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–∞–¥–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏.")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("exit", exit_cmd))

    # –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(
        cb,
        pattern=r"^(gen_text|gen_photo|prompt_master|faq|run|back_menu|fmt_16x9|fmt_9x16|toggle_model)$"
    ))

    # —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.add_error_handler(error_handler)
    log.info("Bot started (polling).")
    app.run_polling(drop_pending_updates=True)

# –∏–∑-–∑–∞ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ /start –≤—ã—à–µ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –∞–ª–∏–∞—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
def /start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    return start_cmd(update, ctx)

if __name__ == "__main__":
    main()
