# -*- coding: utf-8 -*-
# BEST VEO3 BOT ‚Äî text + photo generation, Prompt-Master tuned
# 2025-09-05

import os, re, json, logging, traceback, requests
from typing import Optional, Dict, Any

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ----------------- ENV & LOGGING -----------------
load_dotenv()
TELEGRAM_TOKEN       = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY", "") or os.getenv("OPENAI_KEY", "")
KIE_API_KEY     = os.getenv("KIE_API_KEY", "")
KIE_BASE_URL    = os.getenv("KIE_BASE_URL", "https://api.kie.ai")  # –ø—Ä–æ–≤–µ—Ä—å –≤ .env
LOG_LEVEL       = os.getenv("LOG_LEVEL", "INFO").upper()

logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
log = logging.getLogger("best-veo3")

# ----------------- UI -----------------
MAIN_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="gen_text")],
    [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ", callback_data="gen_photo")],
    [InlineKeyboardButton("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä (ChatGPT)", callback_data="prompt_master")],
    [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (ChatGPT)", callback_data="chat")],
    [InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
     InlineKeyboardButton("üìö –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url="https://t.me/bestveo3promts")],
])

FORMAT_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("16:9", callback_data="fmt_16x9"),
     InlineKeyboardButton("9:16", callback_data="fmt_9x16")],
])

RUN_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="run")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")],
])

def state(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    if "state" not in ctx.user_data:
        ctx.user_data["state"] = {
            "mode": None,            # gen_text | gen_photo | prompt_master | chat
            "aspect": "16:9",
            "last_prompt": None,     # —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Veo3
            "last_image_url": None,  # Telegram file URL, –µ—Å–ª–∏ –ø–æ —Ñ–æ—Ç–æ
            "chat_history": []
        }
    return ctx.user_data["state"]

# ----------------- Heuristics -----------------
def looks_like_ready_prompt(text: str) -> bool:
    if not text: return False
    if text.strip().startswith("{") and "}" in text:
        return True
    score = 0
    for kw in ["fps", "anamorphic", "85mm", "35mm", "lens", "DOF",
               "bokeh", "rack focus", "color palette", "lighting",
               "camera", "glide", "push-in", "tone", "sound", "subtitles",
               "\"shot\"", "\"scene\"", "\"audio\"", "\"cinematic\""]:
        if kw.lower() in text.lower():
            score += 1
    return score >= 3 or len(text) > 400

# ----------------- OpenAI -----------------
def oai_chat(messages, temperature=0.7, max_tokens=1000) -> str:
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω.")
    import openai
    openai.api_key = OPENAI_API_KEY
    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens,
    )
    return resp.choices[0].message["content"].strip()

SYSTEM_PM = {
    "role": "system",
    "content": (
        "–¢—ã ‚Äî —Ä–µ–∂–∏—Å—Å—ë—Ä-–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫/–ø—Ä–æ–º–ø—Ç-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –¥–ª—è Veo3. "
        "–ù–µ –º–µ–Ω—è–π –∏–¥–µ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —É—Å–∏–ª–∏–≤–∞–π –µ—ë: –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –æ–ø—Ç–∏–∫–∞ (–º–º/–∞–Ω–∞–º–æ—Ä—Ñ), "
        "–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (push-in, dolly, glide, rack focus), —Å–≤–µ—Ç –∏ –ø–∞–ª–∏—Ç—Ä–∞, —Ç–µ–º–ø/—Ä–∏—Ç–º, "
        "–º–∏–∫—Ä–æ-–¥–µ—Ç–∞–ª–∏ (–ø—ã–ª—å, –ø–∞—Ä, –±–ª–∏–∫–∏), –∑–≤—É–∫ (–º—É–∑—ã–∫–∞/—à—É–º/–º–∏–∫—Å). "
        "–°—Ç–∏–ª—å: –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π, –∂–∏–≤–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, 3‚Äì6 –∞–±–∑–∞—Ü–µ–≤, 500‚Äì900 —Å–∏–º–≤–æ–ª–æ–≤. "
        "–ò–∑–±–µ–≥–∞–π –≤–æ–¥—ã, –±—Ä–µ–Ω–¥–æ–≤, –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤."
    )
}

# ----------------- Kie / Veo3 -----------------
def submit_veo_job_text(prompt: str, aspect: str) -> dict:
    return _submit_kie({"model":"veo3", "prompt": prompt, "aspect_ratio": "16:9" if aspect=="16:9" else "9:16"})

def submit_veo_job_photo(image_url: str, prompt: str, aspect: str) -> dict:
    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Kie –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç image_url + prompt. –ï—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–π –ø—É—Ç—å ‚Äî –ø–æ–ø—Ä–∞–≤—å –ø–æ–ª—è –Ω–∏–∂–µ.
    payload = {
        "model": "veo3",
        "prompt": prompt,
        "image_url": image_url,   # Telegram file URL, Kie —Å–∫–∞—á–∞–µ—Ç –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å
        "aspect_ratio": "16:9" if aspect=="16:9" else "9:16"
    }
    return _submit_kie(payload)

def _submit_kie(payload: dict) -> dict:
    if not (KIE_API_KEY and KIE_BASE_URL):
        return {"ok": False, "id": None, "error": "KIE_API_KEY –∏–ª–∏ KIE_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω—ã."}
    headers = {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type":"application/json"}
    try:
        r = requests.post(f"{KIE_BASE_URL.rstrip('/')}/v1/veo3/generations", headers=headers, data=json.dumps(payload), timeout=30)
        if r.status_code == 200:
            data = r.json()
            return {"ok": True, "id": data.get("id") or data.get("task_id") or "unknown", "error": None}
        txt = r.text
        if "Illegal IP" in txt or r.status_code in (401,403):
            return {"ok": False, "id": None, "error": "–î–æ—Å—Ç—É–ø API –∑–∞–ø—Ä–µ—â—ë–Ω: IP Render –Ω–µ –≤ whitelist Kie."}
        return {"ok": False, "id": None, "error": f"API {r.status_code}: {txt[:300]}"}
    except Exception as e:
        return {"ok": False, "id": None, "error": f"Network error: {e}"}

# ----------------- Handlers -----------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx); st["mode"] = None
    await update.effective_chat.send_message(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Google Veo3. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∏–∂–µ –∏ —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥—Ä–∞.",
        reply_markup=MAIN_MENU
    )
    await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=FORMAT_KB)

async def cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    st = state(ctx); data = q.data

    if data == "back_menu":
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU); return

    if data.startswith("fmt_"):
        st["aspect"] = "16:9" if data=="fmt_16x9" else "9:16"
        await q.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {st['aspect']}.", reply_markup=RUN_KB); return

    if data == "gen_text":
        st["mode"] = "gen_text"; st["last_image_url"] = None
        await q.edit_message_text(
            "‚úçÔ∏è –ü—Ä–∏—à–ª–∏ –∏–¥–µ—é **–∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç**. "
            "–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –º—ã –Ω–µ –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫ –∑–∞–ø—É—Å–∫—É.",
            reply_markup=FORMAT_KB
        ); return

    if data == "gen_photo":
        st["mode"] = "gen_photo"
        await q.edit_message_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ **—Ñ–æ—Ç–æ** —Å –ø–æ–¥–ø–∏—Å—å—é (–∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã). "
            "–ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∞ –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=FORMAT_KB
        ); return

    if data == "prompt_master":
        st["mode"] = "prompt_master"; st["last_image_url"] = None
        await q.edit_message_text(
            "üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä –≤–∫–ª—é—á—ë–Ω. –û–ø–∏—à–∏ –∏–¥–µ—é 1‚Äì2 —Ñ—Ä–∞–∑–∞–º–∏ ‚Äî —è —É—Å–∏–ª—é –µ—ë. "
            "‚åõ –ù–∞—á–∏–Ω–∞—é –ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç‚Ä¶ (20‚Äì30 —Å–µ–∫)",
            reply_markup=FORMAT_KB
        ); return

    if data == "chat":
        st["mode"] = "chat"
        await q.edit_message_text("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç. –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. /exit ‚Äî –≤—ã—Ö–æ–¥.", reply_markup=RUN_KB); return

    if data == "faq":
        await q.edit_message_text(
            "üìñ FAQ\n‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: https://t.me/bestveo3promts\n‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: 16:9 –∏ 9:16\n"
            "‚Ä¢ –†–µ–Ω–¥–µ—Ä –æ–±—ã—á–Ω–æ 2‚Äì5 –º–∏–Ω.\n‚Ä¢ –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞/–ª–æ–≥–æ—Ç–∏–ø–æ–≤ –≤ –∫–∞–¥—Ä–µ.",
            reply_markup=RUN_KB
        ); return

    if data == "run":
        if st["last_prompt"] is None:
            await q.answer("–ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.", show_alert=True); return
        await q.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Veo3‚Ä¶")
        if st["mode"] == "gen_photo" and st.get("last_image_url"):
            res = submit_veo_job_photo(st["last_image_url"], st["last_prompt"], st["aspect"])
        else:
            res = submit_veo_job_text(st["last_prompt"], st["aspect"])
        if res["ok"]:
            await q.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ID: `{res['id']}`\n–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä 2‚Äì5 –º–∏–Ω—É—Ç.",
                parse_mode=ParseMode.MARKDOWN, reply_markup=RUN_KB
            )
        else:
            msg = res["error"] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
            if "whitelist" in msg or "IP" in msg:
                msg += "\n\n‚öôÔ∏è –ê–¥–º–∏–Ω—É: –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ö–æ–¥—è—â–∏–µ IP Render –≤ whitelist Kie."
            await q.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:\n{msg}", reply_markup=RUN_KB)
        return

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx); text = (update.message.text or "").strip()

    # CHAT
    if st["mode"] == "chat":
        try:
            st["chat_history"] = st.get("chat_history", [])[-8:]
            st["chat_history"].append({"role":"user","content": text})
            answer = oai_chat([{"role":"system","content":"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."}] + st["chat_history"],
                              temperature=0.6, max_tokens=500)
            st["chat_history"].append({"role":"assistant","content": answer})
            await update.message.reply_text(answer)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
        return

    # PROMPT-MASTER
    if st["mode"] == "prompt_master":
        notice = await update.message.reply_text("‚åõ –ù–∞—á–∏–Ω–∞—é –ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç‚Ä¶")
        try:
            prompt = oai_chat([SYSTEM_PM, {"role":"user","content": text}], temperature=0.7, max_tokens=900)
            st["last_prompt"] = prompt
            await notice.edit_text(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
                reply_markup=RUN_KB
            )
        except Exception as e:
            await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

    # GEN BY TEXT (ready prompt or short idea)
    if st["mode"] in (None, "gen_text", "gen_photo"):
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞–ª gen_photo –∏ –ø—Ä–∏—Å–ª–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
        if st["mode"] == "gen_photo" and not st.get("last_image_url"):
            await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é).")
            return

        if looks_like_ready_prompt(text):
            st["last_prompt"] = text
            await update.message.reply_text("‚úÖ –ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º–ø—Ç. –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.", reply_markup=RUN_KB)
            return

        notice = await update.message.reply_text("‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç‚Ä¶")
        try:
            prompt = oai_chat([SYSTEM_PM, {"role":"user","content": text}], temperature=0.7, max_tokens=900)
            st["last_prompt"] = prompt
            await notice.edit_text("‚úÖ –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.", reply_markup=RUN_KB)
        except Exception as e:
            await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–§–æ—Ç–æ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è Veo3. –ë–µ—Ä—ë–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä, —Ñ–æ—Ä–º–∏—Ä—É–µ–º Telegram file URL."""
    st = state(ctx)
    try:
        photo = update.message.photo[-1]
        f = await update.get_bot().get_file(photo.file_id)
        # –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –¢–µ–ª–µ–≥—Ä–∞–º–∞ (Kie —Å–º–æ–∂–µ—Ç —Å–∫–∞—á–∞—Ç—å)
        image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{f.file_path}"
        st["last_image_url"] = image_url

        # –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å ‚Äî —Å—Ä–∞–∑—É –¥–µ–ª–∞–µ–º –ø—Ä–æ–º–ø—Ç; –∏–Ω–∞—á–µ –ø–æ–ø—Ä–æ—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
        caption = (update.message.caption or "").strip()
        if caption:
            notice = await update.message.reply_text("üì∏ –ü—Ä–∏–Ω—è–ª —Ñ–æ—Ç–æ. ‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç‚Ä¶")
            try:
                prompt = oai_chat([SYSTEM_PM, {"role":"user","content": caption}], temperature=0.7, max_tokens=900)
                st["last_prompt"] = prompt
                await notice.edit_text("‚úÖ –§–æ—Ç–æ –∏ –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤—ã. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.", reply_markup=RUN_KB)
            except Exception as e:
                await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        else:
            await update.message.reply_text(
                "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ **–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã** ‚Äî —è –¥–æ—Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–º–ø—Ç.",
                reply_markup=RUN_KB
            )
            st["mode"] = "gen_photo"
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}")

async def exit_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text("–í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await start(update, ctx)

async def error_handler(update: Optional[Update], ctx: ContextTypes.DEFAULT_TYPE):
    log.error("Exception:\n%s", traceback.format_exc())
    try:
        if update and update.effective_chat:
            await update.effective_chat.send_message("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except:  # noqa
        pass

# ----------------- MAIN -----------------
def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
    app = ApplicationBuilder().token(BOT_TOKEN).concurrent_updates(True).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("exit", exit_cmd))

    app.add_handler(CallbackQueryHandler(cb, pattern=r"^(gen_text|gen_photo|prompt_master|chat|faq|run|back_menu|fmt_16x9|fmt_9x16)$"))

    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.add_error_handler(error_handler)
    log.info("Bot started.")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
