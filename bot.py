# -*- coding: utf-8 -*-
# BEST VEO3 BOT ‚Äî text & photo generation + Prompt-Master
# PTB v20+

import os, json, logging, traceback, requests
from typing import Optional, Dict, Any

from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ---------------- ENV & LOG ----------------
load_dotenv()

BOT_TOKEN       = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN") or ""
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY") or os.getenv("OPENAI_KEY") or ""
KIE_API_KEY     = os.getenv("KIE_API_KEY", "")

# –ë–∞–∑–∞ –∏ –ø—É—Ç—å –±–µ—Ä—ë–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ù–û–†–ú–ê–õ–ò–ó–£–ï–ú
KIE_BASE_URL    = (os.getenv("KIE_BASE_URL") or "https://api.kie.ai").strip().rstrip("/")
_raw_path       = (os.getenv("KIE_GEN_PATH") or "/api/v1/veo/generate").strip()

def _normalize_path(p: str) -> str:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /api/..., –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–¥–∞–ª–∏ /v1/..."""
    if not p.startswith("/"):
        p = "/" + p
    # –µ—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ —É–∫–∞–∑–∞–ª–∏ "/v1/..." ‚Äî –¥–æ–±–∞–≤–∏–º –ø—Ä–µ—Ñ–∏–∫—Å /api
    if p.startswith("/v1/"):
        p = "/api" + p
    # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /api/
    if not p.startswith("/api/"):
        # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—É–±–µ–∂: –≤—Å—Ç–∞–≤–∏–º /api/ –ø–µ—Ä–µ–¥ v1
        p = p.replace("/v1/", "/api/v1/", 1)
        if not p.startswith("/api/"):
            p = "/api/v1/veo/generate"
    return p

KIE_GEN_PATH = _normalize_path(_raw_path)
KIE_ENDPOINT = f"{KIE_BASE_URL}{KIE_GEN_PATH}"

LOG_LEVEL = (os.getenv("LOG_LEVEL") or "INFO").upper()
logging.basicConfig(level=getattr(logging, LOG_LEVEL, logging.INFO),
                    format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("best-veo3")

log.info("KIE –±–∞–∑–∞: %s", KIE_BASE_URL)
log.info("KIE –ø—É—Ç—å (—Å—ã—Ä–æ–π): %s", _raw_path)
log.info("KIE –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: %s", KIE_ENDPOINT)

# --------------- UI: KEYBOARDS ---------------
MAIN_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="mode_gen_text")],
    [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ",  callback_data="mode_gen_photo")],
    [InlineKeyboardButton("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä (ChatGPT)",       callback_data="mode_prompt_master")],
    [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (ChatGPT)",         callback_data="mode_chat")],
    [InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
     InlineKeyboardButton("üìö –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url="https://t.me/bestveo3promts")],
])

def kb_format_only(aspect: str) -> InlineKeyboardMarkup:
    b16  = f"{'‚úÖ ' if aspect=='16:9' else ''}üé¨ 16:9"
    b916 = f"{'‚úÖ ' if aspect=='9:16' else ''}üì± 9:16"
    return InlineKeyboardMarkup([[InlineKeyboardButton(b16,  callback_data="fmt_16x9"),
                                  InlineKeyboardButton(b916, callback_data="fmt_9x16")]])

def kb_run_with_format(aspect: str) -> InlineKeyboardMarkup:
    b16  = f"{'‚úÖ ' if aspect=='16:9' else ''}üé¨ 16:9"
    b916 = f"{'‚úÖ ' if aspect=='9:16' else ''}üì± 9:16"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(b16,  callback_data="fmt_16x9"),
         InlineKeyboardButton(b916, callback_data="fmt_9x16")],
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="run")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")],
    ])

AFTER_PM_ACTIONS = InlineKeyboardMarkup([
    [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="mode_gen_text_from_pm")],
    [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ",  callback_data="mode_gen_photo_from_pm")],
])

# ---------------- STATE ----------------
def state(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    if "state" not in ctx.user_data:
        ctx.user_data["state"] = {
            "mode": None,              # gen_text | gen_photo | prompt_master | chat
            "aspect": "16:9",
            "last_prompt": None,
            "last_image_url": None,
            "chat_history": []
        }
    return ctx.user_data["state"]

# ---------------- HELPERS ----------------
def looks_like_ready_prompt(text: str) -> bool:
    if not text: return False
    if text.strip().startswith("{") and "}" in text:
        return True
    score = 0
    for kw in ["fps","anamorphic","85mm","35mm","lens","DOF","bokeh","rack focus",
               "color palette","lighting","camera","glide","push-in","tone","sound",
               "\"shot\"","\"scene\"","\"audio\"","cinematic"]:
        if kw.lower() in text.lower(): score += 1
    return score >= 3 or len(text) > 400

def html_escape(s: str) -> str:
    return (s.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;"))

def oai_chat(messages, temperature=0.7, max_tokens=900) -> str:
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω.")
    import openai
    openai.api_key = OPENAI_API_KEY
    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens,
    )
    return resp.choices[0].message["content"].strip()

SYSTEM_PM = {
    "role":"system",
    "content":(
        "–¢—ã ‚Äî —Ä–µ–∂–∏—Å—Å—ë—Ä-–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫/–ø—Ä–æ–º–ø—Ç-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –¥–ª—è Veo3. "
        "–ù–µ –º–µ–Ω—è–π –∏–¥–µ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —É—Å–∏–ª–∏–≤–∞–π –µ—ë: –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –æ–ø—Ç–∏–∫–∞ (–º–º/–∞–Ω–∞–º–æ—Ä—Ñ), "
        "–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (push-in, dolly, glide, rack focus), —Å–≤–µ—Ç/–ø–∞–ª–∏—Ç—Ä–∞, —Ç–µ–º–ø/—Ä–∏—Ç–º, "
        "–º–∏–∫—Ä–æ-–¥–µ—Ç–∞–ª–∏ (–ø—ã–ª—å, –ø–∞—Ä, –±–ª–∏–∫–∏), –∑–≤—É–∫ (–º—É–∑—ã–∫–∞/—à—É–º/–º–∏–∫—Å). "
        "–ü–∏—à–∏ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ, –∂–∏–≤—ã–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º, 3‚Äì6 –∞–±–∑–∞—Ü–µ–≤ (500‚Äì900 —Å–∏–º–≤–æ–ª–æ–≤). "
        "–ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞/–ª–æ–≥–æ—Ç–∏–ø–æ–≤/—Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ –∫–∞–¥—Ä–µ."
    )
}

# ---------------- KIE / VEO3 ----------------
def _submit_kie(payload: dict) -> dict:
    if not (KIE_API_KEY and KIE_ENDPOINT):
        return {"ok": False, "id": None, "error": "KIE_API_KEY –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API –Ω–µ –∑–∞–¥–∞–Ω—ã."}
    headers = {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type":"application/json"}
    try:
        r = requests.post(KIE_ENDPOINT, headers=headers, data=json.dumps(payload), timeout=30)
        if r.status_code == 200:
            data = r.json()
            return {"ok": True, "id": data.get("id") or data.get("task_id") or "unknown", "error": None}
        txt = r.text
        if "Illegal IP" in txt or r.status_code in (401,403):
            return {"ok": False, "id": None, "error": "–î–æ—Å—Ç—É–ø API –∑–∞–ø—Ä–µ—â—ë–Ω: IP Render –Ω–µ –≤ whitelist Kie."}
        return {"ok": False, "id": None, "error": f"API {r.status_code} –ø–æ –∞–¥—Ä–µ—Å—É {KIE_ENDPOINT}. –¢–µ–ª–æ: {txt[:300]}"}
    except Exception as e:
        return {"ok": False, "id": None, "error": f"Network error: {e}. URL: {KIE_ENDPOINT}"}

def submit_veo_job_text(prompt: str, aspect: str) -> dict:
    return _submit_kie({"model":"veo3","prompt":prompt,"aspect_ratio":"16:9" if aspect=="16:9" else "9:16"})

def submit_veo_job_photo(image_url: str, prompt: str, aspect: str) -> dict:
    return _submit_kie({"model":"veo3","prompt":prompt,"image_url":image_url,
                        "aspect_ratio":"16:9" if aspect=="16:9" else "9:16"})

# ---------------- HANDLERS ----------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx); st["mode"] = None
    await update.effective_chat.send_message(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Google Veo3. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∏–∂–µ.",
        reply_markup=MAIN_MENU
    )

async def cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    st = state(ctx); data = q.data

    # –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
    if data in ("fmt_16x9","fmt_9x16"):
        st["aspect"] = "16:9" if data == "fmt_16x9" else "9:16"
        markup = kb_run_with_format(st["aspect"]) if st.get("last_prompt") else kb_format_only(st["aspect"])
        try:
            await q.edit_message_reply_markup(reply_markup=markup)
        except:
            pass
        return

    if data == "back_menu":
        st["mode"] = None
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU)
        return

    if data == "mode_gen_text":
        st.update({"mode":"gen_text","last_image_url":None,"last_prompt":None})
        await q.edit_message_text("‚úçÔ∏è –ü—Ä–∏—à–ª–∏ –∏–¥–µ—é **–∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç**.\n\n–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:",
                                  reply_markup=kb_format_only(st["aspect"]))
        return

    if data == "mode_gen_photo":
        st.update({"mode":"gen_photo","last_prompt":None})
        await q.edit_message_text("üì∏ –ü—Ä–∏—à–ª–∏ **—Ñ–æ—Ç–æ** —Å –ø–æ–¥–ø–∏—Å—å—é (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ).\n\n–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:",
                                  reply_markup=kb_format_only(st["aspect"]))
        return

    if data == "mode_prompt_master":
        st.update({"mode":"prompt_master","last_image_url":None,"last_prompt":None})
        await q.edit_message_text(
            "üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä –≤–∫–ª—é—á—ë–Ω. –û–ø–∏—à–∏ –∏–¥–µ—é 1‚Äì2 —Ñ—Ä–∞–∑–∞–º–∏ ‚Äî **–Ω–∞—á–Ω—É –ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç**‚Ä¶",
            reply_markup=None
        )
        return

    if data == "mode_chat":
        st["mode"] = "chat"
        await q.edit_message_text("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç. –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. /exit ‚Äî –≤—ã—Ö–æ–¥.",
                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]]))
        return

    if data == "mode_gen_text_from_pm":
        st["mode"] = "gen_text"
        await q.edit_message_text("–†–µ–∂–∏–º ¬´–ø–æ —Ç–µ–∫—Å—Ç—É¬ª. –ò–∑–º–µ–Ω–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∂–µ –∏–ª–∏ –∂–º–∏ ¬´üöÄ¬ª.",
                                  reply_markup=kb_run_with_format(st["aspect"]))
        return

    if data == "mode_gen_photo_from_pm":
        st["mode"] = "gen_photo"
        await q.edit_message_text("–†–µ–∂–∏–º ¬´–ø–æ —Ñ–æ—Ç–æ¬ª. –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).",
                                  reply_markup=kb_run_with_format(st["aspect"]))
        return

    if data == "run":
        if not st.get("last_prompt"):
            await q.answer("–ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.", show_alert=True); return
        await q.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Veo3‚Ä¶")
        res = (submit_veo_job_photo(st["last_image_url"], st["last_prompt"], st["aspect"])
               if st["mode"]=="gen_photo" and st.get("last_image_url")
               else submit_veo_job_text(st["last_prompt"], st["aspect"]))
        if res["ok"]:
            await q.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ID: `{res['id']}`\n–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä 2‚Äì5 –º–∏–Ω—É—Ç.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]])
            )
        else:
            msg = res["error"] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
            if "whitelist" in msg or "IP" in msg:
                msg += "\n\n‚öôÔ∏è –ê–¥–º–∏–Ω—É: –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ö–æ–¥—è—â–∏–µ IP Render –≤ whitelist Kie."
            await q.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:\n{msg}",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]]))
        return

    if data == "faq":
        await q.edit_message_text(
            "üìñ FAQ\n‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: https://t.me/bestveo3promts\n‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: 16:9 –∏ 9:16\n"
            "‚Ä¢ –†–µ–Ω–¥–µ—Ä –æ–±—ã—á–Ω–æ 2‚Äì5 –º–∏–Ω.\n‚Ä¢ –í –∫–∞–¥—Ä–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞/–ª–æ–≥–æ—Ç–∏–ø–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]])
        )
        return

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx); text = (update.message.text or "").strip()

    if st["mode"] == "chat":
        try:
            st["chat_history"] = st.get("chat_history", [])[-8:]
            st["chat_history"].append({"role":"user","content": text})
            answer = oai_chat([{"role":"system","content":"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."}]
                              + st["chat_history"], temperature=0.6, max_tokens=500)
            st["chat_history"].append({"role":"assistant","content": answer})
            await update.message.reply_text(answer)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
        return

    if st["mode"] == "prompt_master":
        working = await update.message.reply_text("‚åõ –ù–∞—á–∏–Ω–∞—é –ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç‚Ä¶")
        try:
            prompt = oai_chat([SYSTEM_PM, {"role":"user","content": text}], temperature=0.7, max_tokens=900)
            st["last_prompt"] = prompt

            await working.edit_text("üß† –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Veo3:")
            prompt_block = f"<pre>{html_escape(prompt)}</pre>"
            await update.message.reply_html(prompt_block, disable_web_page_preview=True)

            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=AFTER_PM_ACTIONS)
        except Exception as e:
            await working.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

    if st["mode"] in (None, "gen_text", "gen_photo"):
        if st["mode"] == "gen_photo" and not st.get("last_image_url"):
            await update.message.reply_text("–ù—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é).")
            return

        if looks_like_ready_prompt(text):
            st["last_prompt"] = text
            await update.message.reply_text("‚úÖ –ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º–ø—Ç. –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.",
                                            reply_markup=kb_run_with_format(st["aspect"]))
            return

        working = await update.message.reply_text("‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç‚Ä¶")
        try:
            prompt = oai_chat([SYSTEM_PM, {"role":"user","content": text}], temperature=0.7, max_tokens=900)
            st["last_prompt"] = prompt
            await working.edit_text("‚úÖ –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ò–∑–º–µ–Ω–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∂–µ –∏–ª–∏ –∂–º–∏ ¬´üöÄ¬ª.",
                                    reply_markup=kb_run_with_format(st["aspect"]))
        except Exception as e:
            await working.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx)
    try:
        photo = update.message.photo[-1]
        f = await update.get_bot().get_file(photo.file_id)
        image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{f.file_path}"
        st["last_image_url"] = image_url
        caption = (update.message.caption or "").strip()

        if caption:
            working = await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. ‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç‚Ä¶")
            try:
                prompt = oai_chat([SYSTEM_PM, {"role":"user","content": caption}], temperature=0.7, max_tokens=900)
                st["last_prompt"] = prompt
                await working.edit_text("‚úÖ –§–æ—Ç–æ –∏ –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤—ã. –ò–∑–º–µ–Ω–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∂–µ –∏–ª–∏ –∂–º–∏ ¬´üöÄ¬ª.",
                                        reply_markup=kb_run_with_format(st["aspect"]))
            except Exception as e:
                await working.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        else:
            st["mode"] = "gen_photo"
            await update.message.reply_text(
                "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ **–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã** ‚Äî —è –¥–æ—Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–º–ø—Ç.",
                reply_markup=kb_format_only(st["aspect"])
            )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}")

async def exit_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text("–í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await start(update, ctx)

async def error_handler(update: Optional[Update], ctx: ContextTypes.DEFAULT_TYPE):
    log.error("Exception:\n%s", traceback.format_exc())
    try:
        if update and update.effective_chat:
            await update.effective_chat.send_message("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except:
        pass

# ---------------- MAIN ----------------
def main():
    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN (–∏–ª–∏ BOT_TOKEN) –Ω–µ –∑–∞–¥–∞–Ω.")
    app: Application = ApplicationBuilder().token(BOT_TOKEN).concurrent_updates(True).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("exit",  exit_cmd))

    app.add_handler(CallbackQueryHandler(
        cb, pattern=r"^(mode_.+|fmt_16x9|fmt_9x16|run|back_menu|faq)$"
    ))

    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.add_error_handler(error_handler)

    log.info("Bot started.")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
