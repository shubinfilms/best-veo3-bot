# -*- coding: utf-8 -*-
# Best VEO3 bot ‚Äî rollback (PTB 13 + polling)

import os, json, logging, traceback, requests
from typing import Optional, Dict, Any
from dotenv import load_dotenv

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
)
from telegram.ext import (
    Updater, CallbackContext, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
)

# ------------ ENV & LOG ------------
load_dotenv()

TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
KIE_API_KEY      = os.getenv("KIE_API_KEY", "")
KIE_BASE_URL     = (os.getenv("KIE_BASE_URL") or "https://api.kie.ai").rstrip("/")
KIE_GENERATE_PATH= (os.getenv("KIE_GENERATE_PATH") or "/api/v1/veo/generate").strip()
BOT_MODEL        = os.getenv("BOT_MODEL", "veo3_fast")  # veo3_fast (–±—ã—Å—Ç—Ä–æ) –∏–ª–∏ veo3 (–∫–∞—á–µ—Å—Ç–≤–æ)

def _normalize_path(p: str) -> str:
    p = p.strip()
    if not p.startswith("/"):
        p = "/" + p
    return p

KIE_GENERATE_PATH = _normalize_path(KIE_GENERATE_PATH)
GEN_URL = f"{KIE_BASE_URL}{KIE_GENERATE_PATH}"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
log = logging.getLogger("best-veo3")

# ------------ UI BUILDERS ------------
def kb_aspect() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ 16:9", callback_data="ar:16:9"),
        InlineKeyboardButton("9:16",    callback_data="ar:9:16"),
    ],[
        InlineKeyboardButton("Fast ‚ö°",    callback_data="model:veo3_fast"),
        InlineKeyboardButton("Quality üé¨", callback_data="model:veo3"),
    ],[
        InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="go")
    ],[
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    ]])

# –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–∞—è in-memory; Render ‚Äî –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å)
STATE: Dict[int, Dict[str, Any]] = {}

def get_state(chat_id: int) -> Dict[str, Any]:
    st = STATE.setdefault(chat_id, {
        "aspect_ratio": "16:9",
        "model": BOT_MODEL,
        "prompt": ""
    })
    return st

# ------------ HANDLERS ------------
def start(update: Update, _: CallbackContext):
    chat_id = update.effective_chat.id
    get_state(chat_id)  # init
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ-–∏–¥–µ—é **–∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç**.\n"
        "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∏ —Ä–µ–∂–∏–º, –∑–∞—Ç–µ–º –∂–º–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.",
        reply_markup=kb_aspect(),
        parse_mode=ParseMode.MARKDOWN
    )

def on_text(update: Update, _: CallbackContext):
    chat_id = update.effective_chat.id
    st = get_state(chat_id)
    st["prompt"] = update.message.text.strip()
    update.message.reply_text(
        "–ü—Ä–æ–º–ø—Ç –ø—Ä–∏–Ω—è—Ç.\n\n"
        f"*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n‚Ä¢ –§–æ—Ä–º–∞—Ç: `{st['aspect_ratio']}`\n‚Ä¢ –†–µ–∂–∏–º: `{st['model']}`",
        reply_markup=kb_aspect(),
        parse_mode=ParseMode.MARKDOWN
    )

def on_cb(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    st = get_state(chat_id)

    data = query.data or ""
    if data.startswith("ar:"):
        st["aspect_ratio"] = data.split(":", 1)[1]
        txt = _summary_text(st)
        query.edit_message_text(txt, reply_markup=kb_aspect(), parse_mode=ParseMode.MARKDOWN)
        return
    if data.startswith("model:"):
        st["model"] = data.split(":", 1)[1]
        txt = _summary_text(st)
        query.edit_message_text(txt, reply_markup=kb_aspect(), parse_mode=ParseMode.MARKDOWN)
        return
    if data == "back":
        txt = _summary_text(st)
        query.edit_message_text(txt, reply_markup=kb_aspect(), parse_mode=ParseMode.MARKDOWN)
        return
    if data == "go":
        if not st.get("prompt"):
            query.edit_message_text("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.", reply_markup=kb_aspect())
            return
        query.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ VEO3‚Ä¶")
        _send_task(query, st, context)
        return

def _summary_text(st: Dict[str, Any]) -> str:
    p = st.get("prompt") or "_–ø—Ä–æ–º–ø—Ç –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω_"
    return (
        "–ü—Ä–æ–º–ø—Ç:\n"
        f"```\n{p}\n```\n\n"
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç: `{st['aspect_ratio']}`\n"
        f"‚Ä¢ –†–µ–∂–∏–º: `{st['model']}`\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∂–º–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª."
    )

def _send_task(query, st: Dict[str, Any], context: CallbackContext):
    payload = {
        "prompt": st["prompt"],
        "model": st["model"],                 # "veo3" | "veo3_fast"
        "aspectRatio": st["aspect_ratio"],    # "16:9" | "9:16" (–≤ API –∫–µ–π—Å –Ω–µ –≤–∞–∂–µ–Ω)
        # "enableFallback": False,            # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å
    }
    headers = {
        "Authorization": f"Bearer {KIE_API_KEY}",
        "Content-Type": "application/json",
    }
    try:
        log.info("KIE POST %s payload=%s", GEN_URL, payload)
        r = requests.post(GEN_URL, headers=headers, json=payload, timeout=60)
        body = {}
        try:
            body = r.json()
        except Exception:
            pass

        # –û—Ç–≤–µ—Ç—ã KIE:
        # 200 ‚Äî —É—Å–ø–µ—Ö (–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞)
        # 402 ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
        # 4xx/5xx ‚Äî –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        if r.ok and body.get("code") == 200:
            task_id = body.get("data", {}).get("taskId") or "unknown"
            query.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ID: `{task_id}`\n–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä 2‚Äì5 –º–∏–Ω—É—Ç.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]])
            )
        elif body.get("code") == 402:
            query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Kie.ai. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        else:
            msg = body.get("msg") or r.text
            query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:\nAPI –æ—Ç–≤–µ—Ç: {msg}")
        log.info("KIE –æ—Ç–≤–µ—Ç %s -> %s", r.status_code, body or r.text)
    except Exception as e:
        log.error("KIE –æ—à–∏–±–∫–∞: %s\n%s", e, traceback.format_exc())
        query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á—É—Ç—å –ø–æ–∑–∂–µ.")

# ------------ MAIN ------------
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is empty")

    # –í–ê–ñ–ù–û: PTB 13 ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Updater + polling
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, on_text))
    dp.add_handler(CallbackQueryHandler(on_cb))

    log.info("Bot is starting (polling)‚Ä¶")
    updater.start_polling(timeout=60, clean=True)
    updater.idle()

if __name__ == "__main__":
    main()
