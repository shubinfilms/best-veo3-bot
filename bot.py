# -*- coding: utf-8 -*-
# BEST VEO3 bot ‚Äî PTB v20.7 + Webhook/Polling, KIE.ai Veo3 Fast/Quality

import os
import json
import logging
import asyncio
from typing import Optional, Dict, Any

import requests
from dotenv import load_dotenv

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ----------------- ENV & LOG -----------------
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
KIE_API_KEY    = os.getenv("KIE_API_KEY", "")
KIE_BASE_URL   = os.getenv("KIE_BASE_URL", "https://api.kie.ai").rstrip("/")
KIE_GEN_PATH   = os.getenv("KIE_GENERATE_PATH", "/api/v1/veo/generate").strip()
BOT_MODEL_DEF  = os.getenv("BOT_MODEL", "veo3_fast").strip()  # veo3_fast (Fast) –∏–ª–∏ veo3 (Quality)
BOT_WEBHOOK    = os.getenv("BOT_WEBHOOK", "1").strip()        # "1" -> webhook; –∏–Ω–∞—á–µ polling
PUBLIC_URL     = os.getenv("PUBLIC_URL", "").rstrip("/")      # https://best-veo3-bot-xxxx.onrender.com
PORT           = int(os.getenv("PORT", "10000"))

if not KIE_GEN_PATH.startswith("/"):
    KIE_GEN_PATH = "/" + KIE_GEN_PATH

KIE_GENERATE_URL   = f"{KIE_BASE_URL}{KIE_GEN_PATH}"
KIE_STATUS_URL     = f"{KIE_BASE_URL}/api/v1/veo/record-info"
KIE_GET_1080P_URL  = f"{KIE_BASE_URL}/api/v1/veo/get-1080p-video"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
)
log = logging.getLogger("best-veo3")

# --------------- STATE MACHINE ---------------
CHOOSE_AR, CHOOSE_SPEED, ENTER_PROMPT, CONFIRM = range(4)


def kb_ar(current: Optional[str] = None) -> InlineKeyboardMarkup:
    v16 = "‚úÖ 16:9" if current == "16:9" else "16:9"
    v916 = "‚úÖ 9:16" if current == "9:16" else "9:16"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(v16, callback_data="ar:16:9"),
         InlineKeyboardButton(v916, callback_data="ar:9:16")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
    ])


def kb_speed(current: Optional[str] = None) -> InlineKeyboardMarkup:
    f = "‚úÖ Fast" if current == "veo3_fast" else "Fast"
    q = "‚úÖ Quality" if current == "veo3" else "Quality"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f, callback_data="speed:veo3_fast"),
         InlineKeyboardButton(q, callback_data="speed:veo3")],
        [InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="go")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_ar")]
    ])


def _headers() -> Dict[str, str]:
    return {
        "Authorization": f"Bearer {KIE_API_KEY}",
        "Content-Type": "application/json",
    }


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["aspect_ratio"] = context.user_data.get("aspect_ratio", "16:9")
    context.user_data["model"] = context.user_data.get("model", BOT_MODEL_DEF)
    context.user_data["prompt"] = ""
    text = "–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ *–∏–ª–∏* –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç ‚úçÔ∏è\n\n–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:"
    await update.effective_message.reply_text(
        text, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_ar(context.user_data["aspect_ratio"])
    )
    return CHOOSE_AR


async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    data = q.data

    if data == "menu":
        return await start(update, context)

    if data.startswith("ar:"):
        _, ar = data.split("ar:", 1)
        context.user_data["aspect_ratio"] = ar
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏:",
            reply_markup=kb_speed(context.user_data.get("model"))
        )
        return CHOOSE_SPEED

    if data == "back_ar":
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:",
            reply_markup=kb_ar(context.user_data.get("aspect_ratio"))
        )
        return CHOOSE_AR

    if data.startswith("speed:"):
        _, model = data.split("speed:", 1)
        context.user_data["model"] = model
        await q.edit_message_reply_markup(
            reply_markup=kb_speed(context.user_data.get("model"))
        )
        return CHOOSE_SPEED

    if data == "go":
        await q.edit_message_text(
            "–û–∫! –ü—Ä–∏—à–ª–∏ –ø—Ä–æ–º–ø—Ç —Ç–µ–∫—Å—Ç–æ–º (–º–æ–∂–Ω–æ –±–æ–ª—å—à–∏–º)."
        )
        return ENTER_PROMPT

    return CHOOSE_AR


async def on_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    prompt = update.effective_message.text.strip()
    context.user_data["prompt"] = prompt

    ar = context.user_data["aspect_ratio"]
    model = context.user_data["model"]
    est = "‚âà 2.0 —Ç–æ–∫–µ–Ω–∞ (Fast)" if model == "veo3_fast" else "‚âà 5.0 —Ç–æ–∫–µ–Ω–æ–≤ (Quality)"

    txt = (
        "üìù *–ü—Ä–æ–º–ø—Ç –ø—Ä–∏–Ω—è—Ç.*\n"
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç: *{ar}*\n"
        f"‚Ä¢ –†–µ–∂–∏–º: *{'Fast' if model=='veo3_fast' else 'Quality'}*\n"
        f"‚Ä¢ –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {est}\n\n"
        "–ù–∞–∂–º–∏ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å*."
    )
    await update.effective_message.reply_text(
        txt, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="submit")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="go")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")],
        ])
    )
    return CONFIRM


def _create_task(prompt: str, model: str, aspect_ratio: str) -> Dict[str, Any]:
    payload = {
        "prompt": prompt,
        "model": model,                # "veo3" | "veo3_fast"
        "aspect_ratio": aspect_ratio,  # "16:9" | "9:16"
        # "enableFallback": True,      # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å
        # "callBackUrl": "...",        # –µ—Å–ª–∏ –ø–æ–¥–Ω–∏–º–µ—à—å –ø—Ä–∏—ë–º –∫–æ–ª–ª–±—ç–∫–æ–≤
    }
    r = requests.post(KIE_GENERATE_URL, headers=_headers(), data=json.dumps(payload), timeout=90)
    try:
        return r.json()
    except Exception:
        return {"code": r.status_code, "msg": r.text}


async def on_submit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()

    prompt = context.user_data.get("prompt", "").strip()
    if not prompt:
        await q.edit_message_text("–ü—Ä–æ–º–ø—Ç –ø—É—Å—Ç. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å*.",
                                  parse_mode=ParseMode.MARKDOWN)
        return ENTER_PROMPT

    ar = context.user_data["aspect_ratio"]
    model = context.user_data["model"]

    await q.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ VEO3‚Ä¶")
    log.info("KIE POST %s payload=%s", KIE_GENERATE_URL, {"model": model, "aspect_ratio": ar})

    resp = await asyncio.to_thread(_create_task, prompt, model, ar)
    code = resp.get("code")
    msg = resp.get("msg")
    data = resp.get("data", {}) or {}

    if code == 200:
        task_id = data.get("taskId") or data.get("task_id") or "unknown"
        txt = (
            f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
            f"*Task ID:* `{task_id}`\n\n"
            "–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä –∑–∞–Ω–∏–º–∞–µ—Ç 2‚Äì5 –º–∏–Ω—É—Ç.\n"
            f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: `/status {task_id}`\n"
            f"1080p (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ): `/hd {task_id}`"
        )
        await q.edit_message_text(txt, parse_mode=ParseMode.MARKDOWN)
        return ConversationHandler.END

    # –ß–∞—Å—Ç—ã–µ –∫–æ–¥—ã
    human = {
        400: "–°–µ–π—á–∞—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è 1080p. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ 1‚Äì2 –º–∏–Ω—É—Ç—ã.",
        401: "–ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á KIE.",
        402: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ KIE.",
        404: "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (URL/–ø—É—Ç—å?).",
        422: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã (–ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π).",
        429: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.",
        455: "–°–µ—Ä–≤–∏—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.",
        500: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
        501: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ.",
        505: "–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.",
    }.get(code, msg or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

    await q.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:\nAPI code {code}: {human}")
    return ConversationHandler.END


def _check_status(task_id: str) -> Dict[str, Any]:
    r = requests.get(f"{KIE_STATUS_URL}?taskId={task_id}", headers=_headers(), timeout=60)
    try:
        return r.json()
    except Exception:
        return {"code": r.status_code, "msg": r.text}


async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/status <taskId>`",
                                                  parse_mode=ParseMode.MARKDOWN)
        return

    task_id = context.args[0]
    data = await asyncio.to_thread(_check_status, task_id)
    code = data.get("code")
    if code != 200:
        await update.effective_message.reply_text(f"‚ùå API code {code}: {data.get('msg')}")
        return

    info = data.get("data") or {}
    flag = info.get("successFlag")  # 0 ‚Äî –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, 1 ‚Äî –≥–æ—Ç–æ–≤–æ, 2/3 ‚Äî –æ—à–∏–±–∫–∞
    if flag == 0:
        await update.effective_message.reply_text("‚åõÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â—ë –∏–¥—ë—Ç. –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ.")
        return
    if flag in (2, 3):
        await update.effective_message.reply_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç/—Ä–µ–∂–∏–º.")
        return

    # –£—Å–ø–µ—Ö
    try:
        urls = json.loads(info.get("resultUrls") or "[]")
    except Exception:
        urls = []

    if not urls:
        await update.effective_message.reply_text("–ì–æ—Ç–æ–≤–æ, –Ω–æ —Å—Å—ã–ª–∫–∏ –Ω–µ –ø—Ä–∏—à–ª–∏. –ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏ `/status`.")
        return

    text = "üé¨ *–ì–æ—Ç–æ–≤–æ!* –°—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ:\n" + "\n".join(urls)
    await update.effective_message.reply_text(text, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=False)


def _get_1080p(task_id: str) -> Dict[str, Any]:
    r = requests.get(f"{KIE_GET_1080P_URL}?taskId={task_id}", headers=_headers(), timeout=60)
    try:
        return r.json()
    except Exception:
        return {"code": r.status_code, "msg": r.text}


async def cmd_hd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/hd <taskId>`",
                                                  parse_mode=ParseMode.MARKDOWN)
        return
    task_id = context.args[0]
    data = await asyncio.to_thread(_get_1080p, task_id)
    code = data.get("code")
    if code != 200:
        await update.effective_message.reply_text(f"‚ùå API code {code}: {data.get('msg')}")
        return
    info = data.get("data") or {}
    url = info.get("url") or info.get("resultUrl")
    if not url:
        await update.effective_message.reply_text("–ü–æ–∫–∞ 1080p –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∑–∂–µ.")
        return
    await update.effective_message.reply_text(f"üéûÔ∏è 1080p: {url}")


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    txt = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
        "/status <taskId> ‚Äî —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
        "/hd <taskId> ‚Äî –ø–æ–ª—É—á–∏—Ç—å 1080p\n"
        "\n–ú–æ–¥–µ–ª–∏:\n"
        "‚Ä¢ *veo3* ‚Äî Quality (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)\n"
        "‚Ä¢ *veo3_fast* ‚Äî Fast (–±—ã—Å—Ç—Ä–µ–µ –∏ –¥–µ—à–µ–≤–ª–µ)\n"
    )
    await update.effective_message.reply_text(txt, parse_mode=ParseMode.MARKDOWN)


def build_app() -> Application:
    return ApplicationBuilder().token(TELEGRAM_TOKEN).build()


def add_handlers(app: Application) -> None:
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_AR: [CallbackQueryHandler(on_cb)],
            CHOOSE_SPEED: [CallbackQueryHandler(on_cb)],
            ENTER_PROMPT: [
                CallbackQueryHandler(on_cb),
                MessageHandler(filters.TEXT & ~filters.COMMAND, on_prompt)
            ],
            CONFIRM: [CallbackQueryHandler(on_submit, pattern="^submit$"),
                      CallbackQueryHandler(on_cb)]
        },
        fallbacks=[CommandHandler("start", start)],
        name="main_conv",
        persistent=False,
    )
    app.add_handler(conv)
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("hd", cmd_hd))
    app.add_handler(CommandHandler("help", help_cmd))


def main() -> None:
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is empty")
    if not KIE_API_KEY:
        log.warning("‚ö†Ô∏è KIE_API_KEY is empty!")

    app = build_app()
    add_handlers(app)

    use_webhook = BOT_WEBHOOK == "1" and PUBLIC_URL
    if use_webhook:
        # –í–µ–±—Ö—É–∫–∏ –¥–ª—è Render (PORT –≤—ã–¥–∞—ë—Ç Render)
        url_path = TELEGRAM_TOKEN  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å
        webhook_url = f"{PUBLIC_URL}/{url_path}"
        log.info("Starting WEBHOOK on 0.0.0.0:%s, %s", PORT, webhook_url)
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=url_path,
            webhook_url=webhook_url,
        )
    else:
        log.info("Starting POLLING")
        app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
