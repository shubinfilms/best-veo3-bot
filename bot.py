# -*- coding: utf-8 -*-
# BEST VEO3 BOT ‚Äî Veo3 Fast + Prompt-Master (PTB 21.6)
# –°–µ–º–ø–ª—ã: —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ ‚Üí KIE /api/v1/veo/generate  (model=veo3_fast)
# 2025-09-06

import os, json, logging, traceback, requests, asyncio
from typing import Dict, Any, Optional

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ----------------- ENV -----------------
load_dotenv()

TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
KIE_API_KEY      = os.getenv("KIE_API_KEY", "")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY", "") or os.getenv("OPENAI_KEY", "")
KIE_BASE_URL     = (os.getenv("KIE_BASE_URL") or "https://api.kie.ai").strip().rstrip("/")
KIE_GEN_PATH_RAW = (os.getenv("KIE_GEN_PATH") or os.getenv("KIE_GENERATE_PATH") or "/api/v1/veo/generate").strip()
PROMPTS_CHANNEL  = os.getenv("BOT_CHANNEL_URL", "https://t.me/bestveo3promts")

def _norm_path(p: str) -> str:
    if not p.startswith("/"):
        p = "/" + p
    if p.startswith("/v1/"):
        p = "/api" + p
    return p

KIE_GEN_PATH = _norm_path(KIE_GEN_PATH_RAW)

# ----------------- LOGGING -----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
log = logging.getLogger("best-veo3-fast")
log.info(f"KIE endpoint: {KIE_BASE_URL}{KIE_GEN_PATH}")

# ----------------- UI -----------------
def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="gen_text")],
        [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ",  callback_data="gen_photo")],
        [InlineKeyboardButton("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä (ChatGPT)",       callback_data="prompt_master")],
        [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (ChatGPT)",         callback_data="chat")],
        [InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
         InlineKeyboardButton("üìà –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url=PROMPTS_CHANNEL)],
    ])

def kb_format(aspect: str) -> InlineKeyboardMarkup:
    b16  = f"{'‚úÖ ' if aspect=='16:9' else ''}üé¨ 16:9"
    b916 = f"{'‚úÖ ' if aspect=='9:16' else ''}üì± 9:16"
    return InlineKeyboardMarkup([[InlineKeyboardButton(b16,  callback_data="fmt_16x9"),
                                  InlineKeyboardButton(b916, callback_data="fmt_9x16")]])

def kb_run(aspect: str) -> InlineKeyboardMarkup:
    b16  = f"{'‚úÖ ' if aspect=='16:9' else ''}üé¨ 16:9"
    b916 = f"{'‚úÖ ' if aspect=='9:16' else ''}üì± 9:16"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(b16,  callback_data="fmt_16x9"),
         InlineKeyboardButton(b916, callback_data="fmt_9x16")],
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (Veo3 Fast)", callback_data="run")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")],
    ])

# ----------------- STATE -----------------
def st(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    if "state" not in ctx.user_data:
        ctx.user_data["state"] = {
            "mode": None,              # gen_text | gen_photo | prompt_master | chat
            "aspect": "16:9",
            "last_prompt": None,
            "last_image_url": None,
            "chat_history": []
        }
    return ctx.user_data["state"]

# ----------------- PROMPT MASTER (OpenAI) -----------------
SYSTEM_PM = {
    "role": "system",
    "content": (
        "You are a senior film director and prompt-writer for Google Veo 3. "
        "Return ONE ready-to-copy cinematic prompt in English, 500‚Äì900 characters long. "
        "No follow-up questions. Enrich the user's idea with: composition, lens (mm/anamorphic), "
        "camera moves (push-in, dolly, glide, rack focus), lighting & color palette, micro-details, "
        "atmosphere, and sound cues. No brands, logos, or on-screen text. Natural, vivid, not florid."
    )
}

def oai_prompt(idea: str) -> str:
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY not set for Prompt-Master.")
    import openai
    openai.api_key = OPENAI_API_KEY
    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        temperature=0.7,
        max_tokens=900,
        messages=[SYSTEM_PM, {"role": "user", "content": idea}],
    )
    return resp.choices[0].message["content"].strip()

def html_escape(s: str) -> str:
    return s.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;")

def looks_like_prompt(text: str) -> bool:
    if not text: return False
    score = 0
    for kw in ["fps","lens","85mm","35mm","anamorphic","rack focus","dolly","glide",
               "color palette","lighting","bokeh","DOF","sound","audio","score","cinematic"]:
        if kw.lower() in text.lower():
            score += 1
    return score >= 2 or len(text) > 400

# ----------------- KIE (Veo3 Fast) -----------------
def _kie_url() -> str:
    url = f"{KIE_BASE_URL}{KIE_GEN_PATH}"
    url = url.replace("://","¬ß¬ß").replace("//","/").replace("¬ß¬ß","://")
    return url

def submit_kie(prompt: str, aspect: str, image_url: Optional[str]) -> Dict[str, Any]:
    if not (KIE_API_KEY and KIE_BASE_URL):
        return {"ok": False, "error": "KIE_API_KEY –∏–ª–∏ KIE_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω—ã."}
    payload = {
        "model": "veo3_fast",  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º Fast
        "prompt": prompt,
        "aspectRatio": "16:9" if aspect == "16:9" else "9:16"
    }
    if image_url:
        payload["imageUrls"] = [image_url]

    headers = {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type": "application/json"}
    url = _kie_url()
    try:
        log.info(f"KIE POST -> {url} | aspect={payload['aspectRatio']} | img={'yes' if image_url else 'no'} | prompt_len={len(prompt)}")
        r = requests.post(url, headers=headers, data=json.dumps(payload), timeout=60)
        body = r.text
        if r.status_code == 200:
            try:
                data = r.json()
            except Exception:
                return {"ok": False, "error": f"Bad JSON from API: {body[:300]}"}
            # KIE –æ–±—ã—á–Ω–æ -> {"code":200,...,"data":{"taskId": "..."}}
            code = int(data.get("code", 0))
            if code == 200:
                tid = (data.get("data") or {}).get("taskId") or data.get("taskId") or data.get("id") or "unknown"
                return {"ok": True, "task_id": tid}
            if code == 402:
                return {"ok": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ KIE (402)."}
            return {"ok": False, "error": f"API code {code}: {data.get('msg') or 'Unknown'}"}

        if r.status_code == 402:
            return {"ok": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ KIE (402)."}
        if r.status_code in (401, 403) or "Illegal IP" in body:
            return {"ok": False, "error": "–î–æ—Å—Ç—É–ø API –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á/whitelist IP."}
        return {"ok": False, "error": f"HTTP {r.status_code}: {body[:300]}"}
    except Exception as e:
        return {"ok": False, "error": f"Network error: {e}"}

# ----------------- typing indicator -----------------
async def typing_on(chat_id: int, ctx: ContextTypes.DEFAULT_TYPE, stop: asyncio.Event):
    try:
        while not stop.is_set():
            await ctx.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(4)
    except Exception:
        pass

# ----------------- Handlers -----------------
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = st(ctx); s["mode"] = None
    await update.effective_chat.send_message("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥—Ä–∞:", reply_markup=kb_format(s["aspect"]))

async def cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    s = st(ctx); data = q.data

    if data == "back_menu":
        s["mode"] = None
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu()); return

    if data.startswith("fmt_"):
        s["aspect"] = "16:9" if data == "fmt_16x9" else "9:16"
        await q.edit_message_text(f"‚úÖ –§–æ—Ä–º–∞—Ç: {s['aspect']}", reply_markup=kb_run(s["aspect"])); return

    if data == "gen_text":
        s["mode"] = "gen_text"; s["last_image_url"] = None
        await q.edit_message_text("‚úçÔ∏è –ü—Ä–∏—à–ª–∏ –∏–¥–µ—é –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–∞–Ω–≥–ª.).", reply_markup=kb_format(s["aspect"])); return

    if data == "gen_photo":
        s["mode"] = "gen_photo"
        await q.edit_message_text("üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å-–∏–¥–µ—é).", reply_markup=kb_format(s["aspect"])); return

    if data == "prompt_master":
        s["mode"] = "prompt_master"; s["last_image_url"] = None
        await q.edit_message_text("üß† –†–µ–∂–∏–º ¬´–ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—à–ª–∏ –∏–¥–µ—é –æ–¥–Ω–æ–π-–¥–≤—É–º—è —Ñ—Ä–∞–∑–∞–º–∏ ‚Äî —è —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É –≥–æ—Ç–æ–≤—ã–π PROMPT (EN).",
                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]]))
        return

    if data == "chat":
        s["mode"] = "chat"
        await q.edit_message_text("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç –≤–∫–ª—é—á—ë–Ω. /exit ‚Äî –≤—ã—Ö–æ–¥.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]])); return

    if data == "faq":
        await q.edit_message_text("FAQ:\n‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: 16:9 / 9:16\n‚Ä¢ –ú–æ–¥–µ–ª—å: Veo3 Fast\n‚Ä¢ –í–∏–¥–µ–æ –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–¥—Ä–µ.",
                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]]))
        return

    if data == "run":
        if not s.get("last_prompt"):
            await q.answer("–ù–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.", show_alert=True); return
        await q.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Veo3 Fast‚Ä¶")
        res = submit_kie(s["last_prompt"], s["aspect"], s.get("last_image_url"))
        if res.get("ok"):
            await q.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ (Veo3 Fast)! ID: `{res['task_id']}`\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–Ω–¥–µ—Ä.",
                parse_mode=ParseMode.MARKDOWN, reply_markup=kb_run(s["aspect"])
            )
        else:
            await q.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {res.get('error')}", reply_markup=kb_run(s["aspect"]))
        return

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = st(ctx)
    txt = (update.message.text or "").strip()
    chat_id = update.effective_chat.id

    # CHAT
    if s["mode"] == "chat":
        await update.message.reply_text("–Ø –∑–¥–µ—Å—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–º–ø—Ç–æ–≤. –î–ª—è –∏–¥–µ–π ‚Äî –≤–∫–ª—é—á–∏ ¬´–ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä¬ª.")
        return

    # PROMPT MASTER
    if s["mode"] == "prompt_master":
        notice = await update.message.reply_text("‚åõ Writing your cinematic prompt‚Ä¶")
        stop = asyncio.Event()
        asyncio.create_task(typing_on(chat_id, ctx, stop))
        try:
            prompt_en = oai_prompt(txt)
            s["last_prompt"] = prompt_en
            stop.set()
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ <pre>, –ø–ª—é—Å –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
            await notice.edit_text(
                f"üß† –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Veo3 Fast:\n<pre>{html_escape(prompt_en)}</pre>",
                parse_mode=ParseMode.HTML,
                reply_markup=kb_run(s["aspect"])
            )
        except Exception as e:
            stop.set()
            await notice.edit_text(f"‚ùå Prompt-Master error: {e}")
        return

    # GEN BY TEXT / PHOTO
    if s["mode"] in (None, "gen_text", "gen_photo"):
        # –µ—Å–ª–∏ —Ñ–æ—Ç–æ-—Ä–µ–∂–∏–º, –Ω–æ —Ñ–æ—Ç–æ –Ω–µ—Ç
        if s["mode"] == "gen_photo" and not s.get("last_image_url"):
            await update.message.reply_text("–ú–Ω–µ –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ–¥–ø–∏—Å—å ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é).")
            return

        if looks_like_prompt(txt):
            s["last_prompt"] = txt
            await update.message.reply_text("‚úÖ –ü—Ä–æ–º–ø—Ç –ø—Ä–∏–Ω—è—Ç. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.", reply_markup=kb_run(s["aspect"]))
            return

        # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ–∫–∞—á–∞–µ–º –∏–¥–µ—é —á–µ—Ä–µ–∑ Prompt-Master
        notice = await update.message.reply_text("‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç‚Ä¶")
        stop = asyncio.Event()
        asyncio.create_task(typing_on(chat_id, ctx, stop))
        try:
            prompt_en = oai_prompt(txt)
            s["last_prompt"] = prompt_en
            stop.set()
            await notice.edit_text(
                f"üß† –ì–æ—Ç–æ–≤–æ. –ü—Ä–æ–≤–µ—Ä—å –∏ –∑–∞–ø—É—Å–∫–∞–π:\n<pre>{html_escape(prompt_en)}</pre>",
                parse_mode=ParseMode.HTML,
                reply_markup=kb_run(s["aspect"])
            )
        except Exception as e:
            stop.set()
            await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = st(ctx); chat_id = update.effective_chat.id
    try:
        photo = update.message.photo[-1]
        f = await ctx.bot.get_file(photo.file_id)
        s["last_image_url"] = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{f.file_path}"

        caption = (update.message.caption or "").strip()
        if caption:
            notice = await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. ‚åõ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–º–ø—Ç‚Ä¶")
            stop = asyncio.Event()
            asyncio.create_task(typing_on(chat_id, ctx, stop))
            try:
                prompt_en = oai_prompt(caption)
                s["last_prompt"] = prompt_en
                stop.set()
                await notice.edit_text(
                    f"‚úÖ –§–æ—Ç–æ –∏ –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤—ã:\n<pre>{html_escape(prompt_en)}</pre>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=kb_run(s["aspect"])
                )
            except Exception as e:
                stop.set()
                await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        else:
            s["mode"] = "gen_photo"
            await update.message.reply_text("üì∏ –§–æ—Ç–æ –µ—Å—Ç—å. –ü—Ä–∏—à–ª–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏–¥–µ—é ‚Äî —è —Å–¥–µ–ª–∞—é –ø—Ä–æ–º–ø—Ç.",
                                            reply_markup=kb_run(s["aspect"]))
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}")

async def cmd_exit(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text("–û–∫, –≤—ã—Ö–æ–∂—É –∏–∑ —Ä–µ–∂–∏–º–∞. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await cmd_start(update, ctx)

async def on_error(update: Optional[Update], ctx: ContextTypes.DEFAULT_TYPE):
    log.error("Exception:\n%s", traceback.format_exc())
    try:
        if update and update.effective_chat:
            await update.effective_chat.send_message("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except:
        pass

def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is empty")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("exit",  cmd_exit))

    app.add_handler(CallbackQueryHandler(cb,
        pattern=r"^(gen_text|gen_photo|prompt_master|chat|faq|back_menu|fmt_16x9|fmt_9x16|run)$"))

    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.add_error_handler(on_error)
    log.info("Bot started (polling).")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
