# -*- coding: utf-8 -*-
# Best VEO3 bot ‚Äî stable build: text/photo ‚Üí KIE ‚Üí poll ‚Üí send video back
# python-telegram-bot 20+, requests, (optional) openai==0.28.x

import os, json, asyncio, logging, traceback, requests
from typing import Any, Dict, Optional

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# --------------------------- ENV & LOG ---------------------------
load_dotenv()

TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
KIE_API_KEY      = os.getenv("KIE_API_KEY", "")

# –±–∞–∑–æ–≤—ã–π URL –∏ –ø—É—Ç–∏ KIE; –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
KIE_BASE_URL     = (os.getenv("KIE_BASE_URL") or "https://api.kie.ai").strip().rstrip("/")
KIE_GEN_PATH     = (os.getenv("KIE_GEN_PATH") or os.getenv("KIE_GENERATE_PATH") or "/api/v1/veo/generate").strip()
KIE_GET_TASKPATH = (os.getenv("KIE_GET_TASK_PATH") or "/api/v1/common/get-task").strip()

OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY", "") or os.getenv("OPENAI_KEY", "")

LOG_LEVEL = (os.getenv("LOG_LEVEL") or "INFO").upper()
logging.basicConfig(level=getattr(logging, LOG_LEVEL, logging.INFO),
                    format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("best-veo3")

def _join(base: str, path: str) -> str:
    if not path.startswith("/"):
        path = "/" + path
    url = f"{base}{path}"
    # —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–≤–æ–π–Ω—ã–µ —Å–ª—ç—à–∏ (–∫—Ä–æ–º–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)
    return url.replace("://", "¬ß¬ß").replace("//", "/").replace("¬ß¬ß", "://")

KIE_GENERATE_URL = _join(KIE_BASE_URL, KIE_GEN_PATH)
KIE_GET_TASK_URL = _join(KIE_BASE_URL, KIE_GET_TASKPATH)
log.info(f"KIE generate endpoint: {KIE_GENERATE_URL}")
log.info(f"KIE get-task endpoint: {KIE_GET_TASK_URL}")

# --------------------------- UI ---------------------------
MAIN_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="gen_text")],
    [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ",  callback_data="gen_photo")],
    [InlineKeyboardButton("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä (ChatGPT)",       callback_data="prompt_master")],
    [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (ChatGPT)",         callback_data="chat")],
    [InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
     InlineKeyboardButton("üìö –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url="https://t.me/bestveo3promts")],
])

def kb_format(aspect: str, with_run: bool) -> InlineKeyboardMarkup:
    b16  = f"{'‚úÖ ' if aspect=='16:9' else ''}üé¨ 16:9"
    b916 = f"{'‚úÖ ' if aspect=='9:16' else ''}üì± 9:16"
    rows = [[InlineKeyboardButton(b16, callback_data="fmt_16x9"),
             InlineKeyboardButton(b916, callback_data="fmt_9x16")]]
    if with_run:
        rows += [[InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="run")]]
    rows += [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]]
    return InlineKeyboardMarkup(rows)

# --------------------------- STATE ---------------------------
def st(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    if "state" not in ctx.user_data:
        ctx.user_data["state"] = {
            "mode": None,              # gen_text | gen_photo | prompt_master | chat
            "aspect": "16:9",
            "last_prompt": None,
            "last_image_url": None,
            "chat_history": [],
            "_typing_stop": None
        }
    return ctx.user_data["state"]

# --------------------------- Helpers ---------------------------
def looks_like_ready_prompt(text: str) -> bool:
    if not text: return False
    if text.strip().startswith("{") and "}" in text:  # JSON-like
        return True
    score = 0
    for kw in ["fps","anamorphic","85mm","35mm","lens","DOF","bokeh","rack focus",
               "color palette","lighting","camera","glide","push-in","tone","sound",
               "\"shot\"","\"scene\"","\"audio\"","cinematic"]:
        if kw.lower() in text.lower():
            score += 1
    return score >= 3 or len(text) > 400

async def typing_loop(chat_id: int, ctx: ContextTypes.DEFAULT_TYPE, stop_event: asyncio.Event):
    try:
        while not stop_event.is_set():
            await ctx.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(4)
    except Exception:
        pass

# ----- Prompt-Master (OpenAI 0.28.x); –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –¥–µ–ª–∞–µ–º fallback
PM_SYSTEM = {
    "role": "system",
    "content": (
        "–¢—ã ‚Äî —Ä–µ–∂–∏—Å—Å—ë—Ä/–ø—Ä–æ–º–ø—Ç-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –¥–ª—è Veo3. –£—Å–∏–ª—å –∏–¥–µ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –æ–ø—Ç–∏–∫–∞ (–º–º/–∞–Ω–∞–º–æ—Ä—Ñ), "
        "–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (push-in, dolly, glide, rack focus), —Å–≤–µ—Ç/–ø–∞–ª–∏—Ç—Ä–∞, —Ç–µ–º–ø/—Ä–∏—Ç–º, –º–∏–∫—Ä–æ-–¥–µ—Ç–∞–ª–∏, –∑–≤—É–∫. "
        "–ü–∏—à–∏ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ, 3‚Äì6 –∞–±–∑–∞—Ü–µ–≤ (500‚Äì900 chars). –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞/–ª–æ–≥–æ—Ç–∏–ø–æ–≤ –≤ –∫–∞–¥—Ä–µ."
    )
}
def build_prompt_with_openai(user_text: str) -> str:
    if not OPENAI_API_KEY:
        # Fallback ‚Äî –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –Ω–∞ –∞–Ω–≥–ª., —á—Ç–æ–±—ã –±–æ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞–ª
        base = user_text.strip()[:240]
        return (
            f"{base}\n\n"
            "Camera opens with a slow push-in; lens 35mm, soft anamorphic flare. Warm key light, cool rim. "
            "Add micro-details (dust, steam, reflections). Keep pacing dynamic with short beats. "
            "No text or logos. Capture cinematic depth and natural soundscape."
        )
    try:
        import openai
        openai.api_key = OPENAI_API_KEY
        resp = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[PM_SYSTEM, {"role": "user", "content": user_text}],
            temperature=0.7,
            max_tokens=900
        )
        return resp.choices[0].message["content"].strip()
    except Exception as e:
        log.error(f"OpenAI error: {e}")
        return build_prompt_with_openai("")  # fallback

# --------------------------- KIE API ---------------------------
def submit_kie(prompt: str, aspect: str, image_url: Optional[str]=None) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≤ Veo3. –ú–æ–¥–µ–ª—å —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–∫ 'veo3' (80 –∫—Ä–µ–¥–∏—Ç–æ–≤)."""
    if not (KIE_API_KEY and KIE_BASE_URL):
        return {"ok": False, "id": None, "error": "KIE_API_KEY –∏–ª–∏ KIE_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω—ã."}

    payload = {
        "model": "veo3",
        "prompt": prompt,
        "aspect_ratio": "16:9" if aspect == "16:9" else "9:16",
    }
    if image_url:
        payload["image_url"] = image_url

    headers = {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type": "application/json"}
    log.info(f"KIE POST -> {KIE_GENERATE_URL} | {payload['aspect_ratio']} | img:{'y' if image_url else 'n'}")

    try:
        r = requests.post(KIE_GENERATE_URL, headers=headers, data=json.dumps(payload), timeout=60)
        data = {}
        try:
            data = r.json()
        except Exception:
            pass

        # KIE –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"code":200,"msg":"success","data":{"taskid":"..."}} –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        if r.status_code == 200:
            # –µ—Å–ª–∏ –≤ —Ç–µ–ª–µ –µ—Å—Ç—å code –∏ –æ–Ω 200 –∏–ª–∏ 0 ‚Äî —ç—Ç–æ —É—Å–ø–µ—Ö
            body_code = (data.get("code") if isinstance(data, dict) else None)
            if body_code in (None, 0, 200):
                taskid = None
                if isinstance(data, dict):
                    # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç taskid –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤ data
                    taskid = data.get("taskid") or (data.get("data") or {}).get("taskid") \
                             or data.get("id") or (data.get("data") or {}).get("id")
                return {"ok": True, "id": taskid or "unknown", "error": None}
            # –∏–Ω–∞—á–µ ‚Äî —ç—Ç–æ –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∞ –≤ —Ç–µ–ª–µ
            return {"ok": False, "id": None, "error": f"KIE code {body_code}: {data.get('msg')}"}

        # HTTP-–æ—à–∏–±–∫–∞
        preview = (r.text or "")[:300]
        if r.status_code == 402:
            return {"ok": False, "id": None, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ KIE –∞–∫–∫–∞—É–Ω—Ç–µ."}
        if "Illegal IP" in preview or r.status_code in (401, 403):
            return {"ok": False, "id": None, "error": "–î–æ—Å—Ç—É–ø API –∑–∞–ø—Ä–µ—â—ë–Ω (whitelist IP)."}
        return {"ok": False, "id": None, "error": f"API {r.status_code}: {preview}"}

    except Exception as e:
        return {"ok": False, "id": None, "error": f"Network error: {e}"}

async def poll_and_send_video(taskid: str, chat_id: int, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Telegram –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ."""
    headers = {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type": "application/json"}
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ –ø–æ–ª—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç taskid/task_id
    body = {"taskid": taskid, "task_id": taskid}

    # –∂–¥—ë–º –¥–æ ~6 –º–∏–Ω—É—Ç (72 * 5 —Å–µ–∫)
    for i in range(72):
        try:
            r = requests.post(KIE_GET_TASK_URL, headers=headers, data=json.dumps(body), timeout=30)
            data = r.json() if r.headers.get("content-type","").startswith("application/json") else {}
            status = (data.get("data") or {}).get("status") or data.get("status")
            if status == "success":
                # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π url
                urls = (data.get("data") or {}).get("result_urls") or data.get("result_urls") or []
                if not urls:
                    break
                video_url = urls[0]
                try:
                    await ctx.bot.send_video(chat_id=chat_id, video=video_url, supports_streaming=True)
                except Exception as send_err:
                    # –µ—Å–ª–∏ Telegram –Ω–µ –ø—Ä–∏–Ω—è–ª –∫–∞–∫ –≤–∏–¥–µ–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Å—ã–ª–∫–æ–π
                    await ctx.bot.send_message(chat_id=chat_id, text=f"üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: {video_url}")
                    log.warning(f"send_video fallback to link: {send_err}")
                return
            elif status in ("failed", "error"):
                msg = (data.get("data") or {}).get("msg") or data.get("msg") or "unknown"
                await ctx.bot.send_message(chat_id=chat_id, text=f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {msg}")
                return
        except Exception as e:
            log.error(f"Polling error: {e}")
        await asyncio.sleep(5)

    await ctx.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –≤ —Å—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --------------------------- Handlers ---------------------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = st(ctx); s["mode"] = None
    await update.effective_chat.send_message(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Google Veo 3. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥—Ä–∞.",
        reply_markup=MAIN_MENU
    )
    await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb_format(s["aspect"], with_run=False))

async def callbacks(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    s = st(ctx); data = q.data

    if data == "back_menu":
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU); return

    if data.startswith("fmt_"):
        s["aspect"] = "16:9" if data == "fmt_16x9" else "9:16"
        await q.edit_message_text(f"‚úÖ –§–æ—Ä–º–∞—Ç: {s['aspect']}.", reply_markup=kb_format(s["aspect"], with_run=bool(s["last_prompt"]))); return

    if data == "gen_text":
        s["mode"] = "gen_text"; s["last_image_url"] = None
        s["last_prompt"] = None
        await q.edit_message_text("‚úçÔ∏è –ü—Ä–∏—à–ª–∏ –∏–¥–µ—é –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞.",
                                  reply_markup=kb_format(s["aspect"], with_run=False)); return

    if data == "gen_photo":
        s["mode"] = "gen_photo"; s["last_prompt"] = None
        await q.edit_message_text("üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é). –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç.",
                                  reply_markup=kb_format(s["aspect"], with_run=False)); return

    if data == "prompt_master":
        s["mode"] = "prompt_master"; s["last_image_url"] = None
        s["last_prompt"] = None
        await q.edit_message_text("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä –≤–∫–ª—é—á—ë–Ω. –û–ø–∏—à–∏ –∏–¥–µ—é 1‚Äì2 —Ñ—Ä–∞–∑–∞–º–∏ ‚Äî **—Å—Ä–∞–∑—É –Ω–∞–ø–∏—à—É –ø—Ä–æ–º–ø—Ç**.",
                                  reply_markup=kb_format(s["aspect"], with_run=False)); return

    if data == "chat":
        s["mode"] = "chat"
        await q.edit_message_text("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç. –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. /exit ‚Äî –≤—ã—Ö–æ–¥.",
                                  reply_markup=kb_format(s["aspect"], with_run=False)); return

    if data == "faq":
        await q.edit_message_text(
            "üìñ FAQ\n‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: https://t.me/bestveo3promts\n‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: 16:9 –∏ 9:16\n"
            "‚Ä¢ –†–µ–Ω–¥–µ—Ä –æ–±—ã—á–Ω–æ 2‚Äì5 –º–∏–Ω.\n‚Ä¢ –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞/–ª–æ–≥–æ—Ç–∏–ø–æ–≤ –≤ –∫–∞–¥—Ä–µ.",
            reply_markup=kb_format(s["aspect"], with_run=bool(s["last_prompt"]))
        ); return

    if data == "run":
        if not s.get("last_prompt"):
            await q.answer("–ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.", show_alert=True); return
        await q.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Veo3‚Ä¶")
        res = submit_kie(s["last_prompt"], s["aspect"], s.get("last_image_url"))
        if res["ok"]:
            taskid = res["id"]
            await q.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞. ID: `{taskid}`\n–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä 2‚Äì5 –º–∏–Ω—É—Ç.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=kb_format(s["aspect"], with_run=True)
            )
            # –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫)
            ctx.application.create_task(poll_and_send_video(taskid, update.effective_chat.id, ctx))
        else:
            await q.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {res['error']}",
                                      reply_markup=kb_format(s["aspect"], with_run=True))
        return

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = st(ctx); text = (update.message.text or "").strip()
    chat_id = update.effective_chat.id

    # –æ–±—ã—á–Ω—ã–π —á–∞—Ç
    if s["mode"] == "chat":
        try:
            # –ø—Ä–æ—Å—Ç–æ–π —ç—Ö–æ (—á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å ChatGPT-—á–∞—Å—Ç—å, –µ—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç)
            await update.message.reply_text(text)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
        return

    # prompt master
    if s["mode"] == "prompt_master":
        notice = await update.message.reply_text("‚åõ –ü–∏—à—É –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç‚Ä¶")
        s["_typing_stop"] = asyncio.Event()
        asyncio.create_task(typing_loop(chat_id, ctx, s["_typing_stop"]))
        try:
            prompt = build_prompt_with_openai(text)
            s["last_prompt"] = prompt
            s["_typing_stop"].set()
            await notice.edit_text("üß† –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Veo3:",
                                   reply_markup=kb_format(s["aspect"], with_run=True))
            await update.effective_chat.send_message(f"<pre>{prompt}</pre>", parse_mode=ParseMode.HTML)
        except Exception as e:
            s["_typing_stop"].set()
            await notice.edit_text(f"‚ùå Prompt-Master error: {e}")
        return

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É/—Ñ–æ—Ç–æ
    if s["mode"] in (None, "gen_text", "gen_photo"):
        if s["mode"] == "gen_photo" and not s.get("last_image_url"):
            await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –ø–æ—Ç–æ–º —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç.")
            return

        if looks_like_ready_prompt(text):
            s["last_prompt"] = text
            await update.message.reply_text("‚úÖ –ü—Ä–∏–Ω—è–ª –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.", reply_markup=kb_format(s["aspect"], with_run=True))
            return

        notice = await update.message.reply_text("‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç‚Ä¶")
        s["_typing_stop"] = asyncio.Event()
        asyncio.create_task(typing_loop(chat_id, ctx, s["_typing_stop"]))
        try:
            prompt = build_prompt_with_openai(text)
            s["last_prompt"] = prompt
            s["_typing_stop"].set()
            await notice.edit_text("‚úÖ –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
                                   reply_markup=kb_format(s["aspect"], with_run=True))
        except Exception as e:
            s["_typing_stop"].set()
            await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = st(ctx); chat_id = update.effective_chat.id
    try:
        photo = update.message.photo[-1]
        f = await ctx.bot.get_file(photo.file_id)
        image_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{f.file_path}"
        s["last_image_url"] = image_url

        caption = (update.message.caption or "").strip()
        if caption:
            notice = await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. ‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç‚Ä¶")
            s["_typing_stop"] = asyncio.Event()
            asyncio.create_task(typing_loop(chat_id, ctx, s["_typing_stop"]))
            try:
                prompt = build_prompt_with_openai(caption)
                s["last_prompt"] = prompt
                s["_typing_stop"].set()
                await notice.edit_text("‚úÖ –§–æ—Ç–æ –∏ –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤—ã. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
                                       reply_markup=kb_format(s["aspect"], with_run=True))
            except Exception as e:
                s["_typing_stop"].set()
                await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        else:
            s["mode"] = "gen_photo"
            await update.message.reply_text(
                "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ **–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã** ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç.",
                reply_markup=kb_format(s["aspect"], with_run=False)
            )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}")

async def exit_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text("–í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await start(update, ctx)

async def error_handler(update: Optional[Update], ctx: ContextTypes.DEFAULT_TYPE):
    log.error("Exception:\n%s", traceback.format_exc())
    try:
        if update and update.effective_chat:
            await update.effective_chat.send_message("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except:
        pass

# --------------------------- MAIN ---------------------------
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("exit", exit_cmd))
    app.add_handler(CallbackQueryHandler(
        callbacks,
        pattern=r"^(gen_text|gen_photo|prompt_master|chat|faq|run|back_menu|fmt_16x9|fmt_9x16)$"
    ))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_error_handler(error_handler)

    log.info("Bot started.")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
