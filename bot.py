# -*- coding: utf-8 -*-
# BEST VEO3 BOT ‚Äî text + photo + Prompt-Master + –∞–≤—Ç–æ-–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ KIE
# –í–µ—Ä—Å–∏—è: 2025-09-06

import os, json, logging, asyncio, traceback, io
from typing import Dict, Any, Optional, List

import requests
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ===================== ENV & LOG =====================
load_dotenv()

TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY", "") or os.getenv("OPENAI_KEY", "")
KIE_API_KEY     = os.getenv("KIE_API_KEY", "")
KIE_BASE_URL    = (os.getenv("KIE_BASE_URL") or "https://api.kie.ai").strip().rstrip("/")

# –ü—É—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è KIE: /api/v1/veo/generate)
KIE_GEN_PATH    = (os.getenv("KIE_GEN_PATH") or os.getenv("KIE_GENERATE_PATH") or "/api/v1/veo/generate").strip()
# –ü—É—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–≤ KIE –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ)
KIE_GET_PATHS   = [
    (os.getenv("KIE_GET_TASK_PATH") or "/api/v1/common/get_task").strip(),
    "/api/v1/veo/get_task",
    "/api/common/get_task",
]

LOG_LEVEL = (os.getenv("LOG_LEVEL") or "INFO").upper()
logging.basicConfig(level=getattr(logging, LOG_LEVEL, logging.INFO),
                    format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("best-veo3")

def _join_url(base: str, path: str) -> str:
    u = f"{base.rstrip('/')}/{path.lstrip('/')}"
    return u.replace("://", "¬ß¬ß").replace("//", "/").replace("¬ß¬ß", "://")

GEN_URL = _join_url(KIE_BASE_URL, KIE_GEN_PATH)
GET_URLS = [_join_url(KIE_BASE_URL, p) for p in KIE_GET_PATHS]

log.info(f"KIE generate endpoint: {GEN_URL}")
log.info(f"KIE get-task endpoints: {', '.join(GET_URLS)}")

# ===================== UI =====================
MAIN_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="mode_gen_text")],
    [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ",  callback_data="mode_gen_photo")],
    [InlineKeyboardButton("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä (ChatGPT)",       callback_data="mode_prompt_master")],
    [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (ChatGPT)",         callback_data="mode_chat")],
    [InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
     InlineKeyboardButton("üìà –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url="https://t.me/bestveo3promts")],
])

def kb_formats(aspect: str, show_run: bool=False) -> InlineKeyboardMarkup:
    b16  = f"{'‚úÖ ' if aspect=='16:9' else ''}üé¨ 16:9"
    b916 = f"{'‚úÖ ' if aspect=='9:16' else ''}üì± 9:16"
    rows = [[InlineKeyboardButton(b16, callback_data="fmt_16x9"),
             InlineKeyboardButton(b916, callback_data="fmt_9x16")]]
    if show_run:
        rows.append([InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="run")])
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")])
    return InlineKeyboardMarkup(rows)

# ===================== STATE =====================
def state(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    if "state" not in ctx.user_data:
        ctx.user_data["state"] = {
            "mode": None,            # gen_text | gen_photo | prompt_master | chat
            "aspect": "16:9",
            "last_prompt": None,
            "last_image_url": None,
            "chat_history": [],
        }
    return ctx.user_data["state"]

# ===================== Prompt-Master (OpenAI 0.28 API) =====================
def oai_prompt_master(idea_text: str) -> str:
    """
    –î–µ–ª–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç 500‚Äì900 —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ä–∞–∑—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π openai==0.28.* (ChatCompletion).
    """
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω.")

    import openai  # –∏–∑ –ø–∞–∫–µ—Ç–∞ 0.28.*
    openai.api_key = OPENAI_API_KEY

    system = {
        "role": "system",
        "content": (
            "You are a film director and prompt-writer for Google Veo3. "
            "Write a single cinematic prompt in English (500‚Äì900 characters), "
            "no follow-up questions. Keep user's idea intact; enrich with optics (mm/anamorphic), "
            "camera motion (push-in, dolly, glide, rack focus), light/palette, rhythm, "
            "micro-details (dust, vapor, lens flare), and audio cues. "
            "No brands/logos/subtitles. No meta talk. Output only the prompt text."
        )
    }
    user = {"role": "user", "content": idea_text}

    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[system, user],
        temperature=0.7,
        max_tokens=900,
    )
    return resp.choices[0].message["content"].strip()

# ===================== KIE API =====================
def _submit_kie(payload: Dict[str, Any]) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –ú–æ–¥–µ–ª—å —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞ 'veo3_fast'."""
    if not (KIE_API_KEY and KIE_BASE_URL):
        return {"ok": False, "error": "KIE_API_KEY –∏–ª–∏ KIE_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω—ã.", "task_id": None}

    payload = dict(payload or {})
    payload["model"] = "veo3_fast"          # ‚Üê –ñ–Å–°–¢–ö–û: –≤—Å–µ–≥–¥–∞ fast
    headers = {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type": "application/json"}

    # –∫–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥ –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–∞
    safe_log = {
        "model": payload.get("model"),
        "aspect_ratio": payload.get("aspect_ratio"),
        "has_image": bool(payload.get("image_url")),
        "prompt_len": len(payload.get("prompt", "")),
    }
    log.info(f"KIE POST {GEN_URL} | payload: {safe_log}")

    try:
        r = requests.post(GEN_URL, headers=headers, data=json.dumps(payload), timeout=60)
    except Exception as e:
        return {"ok": False, "error": f"Network error: {e}", "task_id": None}

    txt = r.text[:500]
    if r.status_code != 200:
        if r.status_code == 402:
            return {"ok": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ KIE.", "task_id": None}
        if r.status_code in (401, 403) or "Illegal IP" in txt:
            return {"ok": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω (–∫–ª—é—á/whitelist/IP).", "task_id": None}
        return {"ok": False, "error": f"HTTP {r.status_code}: {txt}", "task_id": None}

    # JSON —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
    try:
        data = r.json()
    except Exception:
        data = {}

    # –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –≤ body
    if isinstance(data, dict) and "code" in data and int(data.get("code")) != 0:
        return {"ok": False, "error": f"KIE code {data.get('code')}: {data.get('msg')}", "task_id": None}

    task_id = data.get("taskid") or data.get("task_id") or data.get("id")
    if not task_id:
        return {"ok": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task_id: {data}", "task_id": None}
    return {"ok": True, "error": None, "task_id": task_id}

def _extract_status_and_urls(data: Dict[str, Any]) -> (str, List[str]):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –æ—Ç–≤–µ—Ç–∞ get_task.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (status, urls).
    """
    # –≤–æ–∑–º–æ–∂–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
    payload = data.get("data") if isinstance(data, dict) and "data" in data else data
    if not isinstance(payload, dict):
        payload = {}

    # —Å—Ç–∞—Ç—É—Å—ã –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ
    status = (
        payload.get("status")
        or payload.get("state")
        or payload.get("taskStatus")
        or payload.get("task_status")
        or ""
    )
    status = str(status).lower()

    # —Å—Å—ã–ª–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    urls: List[str] = []
    if "result_urls" in payload:
        ru = payload.get("result_urls")
        if isinstance(ru, list):
            urls = [str(u) for u in ru if u]
        elif isinstance(ru, str):
            urls = [ru]
    for key in ("url", "video_url", "result_url"):
        if payload.get(key):
            urls.append(str(payload[key]))

    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º
    urls = [u for i, u in enumerate(urls) if u and u not in urls[:i]]
    return status, urls

async def poll_kie_and_send(chat_id: int, task_id: str, ctx: ContextTypes.DEFAULT_TYPE,
                            max_minutes: int = 20, interval_sec: int = 8):
    """
    –ü—É–ª–ª–∏–º KIE –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É.
    """
    headers = {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type": "application/json"}
    deadline = asyncio.get_event_loop().time() + max_minutes * 60

    await ctx.bot.send_message(chat_id, "‚è≥ –ñ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Veo3‚Ä¶")

    while asyncio.get_event_loop().time() < deadline:
        for url in GET_URLS:
            try:
                r = requests.post(url, headers=headers, data=json.dumps({"taskid": task_id}), timeout=30)
                if r.status_code != 200:
                    continue
                data = r.json() if r.headers.get("content-type", "").startswith("application/json") else {}
                # –µ—Å–ª–∏ API –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ {code:0,data:{...}}
                if isinstance(data, dict) and "code" in data and int(data.get("code")) != 0:
                    # –æ—à–∏–±–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã KIE
                    await ctx.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ KIE: {data.get('msg')}")
                    return

                status, urls = _extract_status_and_urls(data)
                log.info(f"poll[{task_id}] {url} -> status={status} urls={len(urls)}")

                if status in ("success", "succeed", "finished", "done", "complete", "completed", "ok"):
                    if urls:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ –ø–æ URL. –ï—Å–ª–∏ –Ω–µ —É–¥–∞—Å—Ç—Å—è ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º –∏ —à–ª—ë–º —Ñ–∞–π–ª–æ–º.
                        for u in urls:
                            try:
                                await ctx.bot.send_video(chat_id, u, supports_streaming=True)
                            except Exception:
                                # fallback ‚Äî —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                                try:
                                    resp = requests.get(u, timeout=60)
                                    bio = io.BytesIO(resp.content)
                                    bio.name = "result.mp4"
                                    await ctx.bot.send_video(chat_id, InputFile(bio), supports_streaming=True)
                                except Exception as e:
                                    await ctx.bot.send_message(chat_id, f"üîó –†–µ–∑—É–ª—å—Ç–∞—Ç: {u}\n(–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–æ–º: {e})")
                        return
                    else:
                        await ctx.bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ, –Ω–æ URL –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–¥–∞—á—É –≤ –∫–∞–±–∏–Ω–µ—Ç–µ KIE.")
                        return

                # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
            except Exception as e:
                log.warning(f"poll error[{task_id}] {url}: {e}")

        await asyncio.sleep(interval_sec)

    await ctx.bot.send_message(chat_id, "‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –í–∏–¥–µ–æ –µ—â—ë —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –≤ –∂—É—Ä–Ω–∞–ª–∞—Ö KIE.")

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï =====================
def looks_like_ready_prompt(text: str) -> bool:
    if not text:
        return False
    t = text.strip()
    if t.startswith("{") and "}" in t:
        return True
    score = 0
    for kw in ("fps", "anamorphic", "85mm", "35mm", "lens", "DOF", "bokeh", "rack focus",
               "color palette", "lighting", "camera", "glide", "push-in", "tone", "sound",
               "\"shot\"", "\"scene\"", "\"audio\"", "cinematic"):
        if kw in t.lower():
            score += 1
    return score >= 3 or len(t) > 400

async def typing(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, sec: float = 3.0):
    try:
        await ctx.bot.send_chat_action(chat_id, ChatAction.TYPING)
        await asyncio.sleep(sec)
    except:  # noqa
        pass

# ===================== HANDLERS =====================
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx); st["mode"] = None
    await update.effective_chat.send_message(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Google Veo 3. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥—Ä–∞.",
        reply_markup=MAIN_MENU
    )
    await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb_formats(st["aspect"]))

async def cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    st = state(ctx)
    data = q.data

    if data == "back_menu":
        st["mode"] = None
        st["last_prompt"] = None
        st["last_image_url"] = None
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU)
        return

    if data.startswith("fmt_"):
        st["aspect"] = "16:9" if data == "fmt_16x9" else "9:16"
        show_run = bool(st.get("last_prompt"))
        try:
            await q.edit_message_reply_markup(reply_markup=kb_formats(st["aspect"], show_run=show_run))
        except Exception:
            # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤—ã ‚Äî –ø–µ—Ä–µ–ø–∏—à–µ–º —Ç–µ–∫—Å—Ç
            await q.edit_message_text(f"‚úÖ –§–æ—Ä–º–∞—Ç: {st['aspect']}", reply_markup=kb_formats(st["aspect"], show_run=show_run))
        return

    if data == "mode_gen_text":
        st["mode"] = "gen_text"
        st["last_image_url"] = None
        st["last_prompt"] = None
        await q.edit_message_text(
            "‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ **–∏–¥–µ—é** –∏–ª–∏ **–≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç**.\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –∏–¥–µ—è, Prompt-Master –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ñ–æ—Ä–º–∏—Ç –µ—ë –≤ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç.",
            reply_markup=kb_formats(st["aspect"])
        )
        return

    if data == "mode_gen_photo":
        st["mode"] = "gen_photo"
        st["last_prompt"] = None
        await q.edit_message_text(
            "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ **—Ñ–æ—Ç–æ** (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é). –ü–æ –ø–æ–¥–ø–∏—Å–∏ —è —Å–¥–µ–ª–∞—é –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç.",
            reply_markup=kb_formats(st["aspect"])
        )
        return

    if data == "mode_prompt_master":
        st["mode"] = "prompt_master"
        st["last_prompt"] = None
        await q.edit_message_text(
            "üß† –†–µ–∂–∏–º ¬´–ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–∏–¥–µ—é** 1‚Äì2 —Ñ—Ä–∞–∑–∞–º–∏ ‚Äî —è —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É –≥–æ—Ç–æ–≤—ã–π **–∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π** –ø—Ä–æ–º–ø—Ç (500‚Äì900 —Å–∏–º–≤.).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]])
        )
        return

    if data == "mode_chat":
        st["mode"] = "chat"
        await q.edit_message_text("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç –≤–∫–ª—é—á—ë–Ω. /exit ‚Äî –≤—ã—Ö–æ–¥.", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
        ]))
        return

    if data == "faq":
        await q.edit_message_text(
            "üìñ FAQ\n‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: 16:9 –∏ 9:16\n‚Ä¢ –†–µ–Ω–¥–µ—Ä –æ–±—ã—á–Ω–æ 2‚Äì5 –º–∏–Ω.\n‚Ä¢ –ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–æ–≤/—Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–¥—Ä–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu"),
                 InlineKeyboardButton("üìà –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url="https://t.me/bestveo3promts")]
            ])
        )
        return

    if data == "run":
        if not st.get("last_prompt"):
            await q.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–æ–º–ø—Ç.", show_alert=True)
            return
        await q.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Veo3 Fast‚Ä¶")

        payload = {
            "prompt": st["last_prompt"],
            "aspect_ratio": "16:9" if st["aspect"] == "16:9" else "9:16",
        }
        if st["mode"] == "gen_photo" and st.get("last_image_url"):
            payload["image_url"] = st["last_image_url"]

        res = _submit_kie(payload)
        if not res["ok"]:
            await q.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {res['error']}",
                                      reply_markup=kb_formats(st["aspect"], show_run=True))
            return

        task_id = res["task_id"]
        await q.edit_message_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞. ID: `{task_id}`\n–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä 2‚Äì5 –º–∏–Ω.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb_formats(st["aspect"], show_run=True)
        )

        # —Ñ–æ–Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        asyncio.create_task(poll_kie_and_send(update.effective_chat.id, task_id, ctx))
        return

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx)
    text = (update.message.text or "").strip()
    chat_id = update.effective_chat.id

    # –û–±—ã—á–Ω—ã–π —á–∞—Ç
    if st["mode"] == "chat":
        await typing(ctx, chat_id)
        await update.message.reply_text("üëã (—á–∞—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–µ–π—á–∞—Å –º–∏–Ω–∏–º–∞–ª–µ–Ω, —É–ø–æ—Ä –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ)")
        return

    # Prompt-Master
    if st["mode"] == "prompt_master":
        try:
            await typing(ctx, chat_id, 2.5)
            prompt = oai_prompt_master(text)
            st["last_prompt"] = prompt
            await update.message.reply_text(
                f"üß† –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Veo3:\n<pre>{prompt}</pre>",
                parse_mode=ParseMode.HTML,
                reply_markup=kb_formats(st["aspect"], show_run=True)
            )
        except Exception as e:
            await update.message.reply_text(
                "‚ùå Prompt-Master error:\n" + str(e),
                disable_web_page_preview=True
            )
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É/—Ñ–æ—Ç–æ
    if st["mode"] in (None, "gen_text", "gen_photo"):
        if st["mode"] == "gen_photo" and not st.get("last_image_url"):
            await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ–¥–ø–∏—Å—å ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é).")
            return

        # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç ‚Äî –Ω–µ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º
        if looks_like_ready_prompt(text):
            st["last_prompt"] = text
            await update.message.reply_text("‚úÖ –ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º–ø—Ç. –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.",
                                            reply_markup=kb_formats(st["aspect"], show_run=True))
            return

        # –∏–Ω–∞—á–µ –¥–µ–ª–∞–µ–º –∫–∏–Ω–æ–ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ PM
        try:
            await typing(ctx, chat_id, 2.5)
            prompt = oai_prompt_master(text)
            st["last_prompt"] = prompt
            await update.message.reply_text(
                "‚úÖ –ü—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
                reply_markup=kb_formats(st["aspect"], show_run=True)
            )
        except Exception as e:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç:\n" + str(e))
        return

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx)
    chat_id = update.effective_chat.id
    try:
        photo = update.message.photo[-1]
        f = await ctx.bot.get_file(photo.file_id)
        image_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{f.file_path}"
        st["last_image_url"] = image_url

        caption = (update.message.caption or "").strip()
        if caption:
            await typing(ctx, chat_id)
            try:
                prompt = oai_prompt_master(caption)
                st["last_prompt"] = prompt
                await update.message.reply_text(
                    "üì∏ –§–æ—Ç–æ –∏ –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤—ã. –ù–∞–∂–º–∏—Ç–µ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
                    reply_markup=kb_formats(st["aspect"], show_run=True)
                )
            except Exception as e:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: " + str(e))
        else:
            st["mode"] = "gen_photo"
            await update.message.reply_text(
                "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã ‚Äî —è –æ—Ñ–æ—Ä–º–ª—é –ø—Ä–æ–º–ø—Ç.",
                reply_markup=kb_formats(st["aspect"], show_run=False)
            )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}")

async def exit_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text("–í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await start(update, ctx)

async def error_handler(update: Optional[Update], ctx: ContextTypes.DEFAULT_TYPE):
    log.error("Exception:\n%s", traceback.format_exc())
    try:
        if update and update.effective_chat:
            await update.effective_chat.send_message("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except:
        pass

# ===================== MAIN =====================
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("exit", exit_cmd))

    app.add_handler(CallbackQueryHandler(
        cb, pattern=r"^(mode_gen_text|mode_gen_photo|mode_prompt_master|mode_chat|faq|back_menu|fmt_16x9|fmt_9x16|run)$"
    ))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_error_handler(error_handler)

    log.info("Bot started.")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
