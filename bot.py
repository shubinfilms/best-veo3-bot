import os
import logging
import requests
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (–µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã/–∫–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
KIE_API_KEY = os.getenv("KIE_API_KEY")
KIE_BASE_URL = os.getenv("KIE_BASE_URL", "https://api.kie.ai")
KIE_GEN_PATH = os.getenv("KIE_GEN_PATH", "/api/v1/veo/generate")

# –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
KIE_GENERATE_URL = KIE_BASE_URL.rstrip("/") + KIE_GEN_PATH
# URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
KIE_STATUS_URL = KIE_BASE_URL.rstrip("/") + "/api/v1/veo/record-info"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ (ConversationHandler)
# –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É:
T_PROMPT, T_RATIO, T_CONFIRM = range(3)
# –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ:
P_PHOTO, P_PROMPT, P_RATIO, P_CONFIRM = range(4)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–∂–∏–º—ã –∏ —Ç.–¥.)
    context.user_data.clear()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="gen_text")],
        [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ", callback_data="gen_photo")],
        [InlineKeyboardButton("üí≠ –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä (ChatGPT)", callback_data="mode_prompt")],
        [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (ChatGPT)", callback_data="mode_chat")],
        [InlineKeyboardButton("‚ùì FAQ", callback_data="faq"), InlineKeyboardButton("üìà –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url="https://t.me/your_channel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É Markdown –¥–ª—è —ç–º–æ–¥–∑–∏, –ø–æ—ç—Ç–æ–º—É parse_mode="Markdown")
    await update.message.reply_text("üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", reply_markup=reply_markup, parse_mode="Markdown")

async def faq_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ FAQ. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.
    """
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await update.callback_query.answer()
    faq_text = (
        "‚ùì *FAQ:*\n"
        "- *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ AI-–≤–∏–¥–µ–æ (5‚Äì8 —Å–µ–∫) —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ Google Veo3 (—á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–∏—Å–∞ KIE.ai).\n"
        "- *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?* –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã, –ª–∏–±–æ —Ñ–æ—Ç–æ. –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
        "- *–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è?* –û–∫–æ–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –ø—Ä–∏—à–ª—ë—Ç –≤–∏–¥–µ–æ, –∫–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.\n"
        "- *–ß—Ç–æ –∑–∞ —Ä–µ–∂–∏–º –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä?* –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç (ChatGPT) –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n"
        "- *–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è?* –î–∞, –≤ —Ä–µ–∂–∏–º–µ –û–±—ã—á–Ω—ã–π —á–∞—Ç –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ ChatGPT.\n"
        "\n‚ÑπÔ∏è *–°–æ–≤–µ—Ç:* –í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª. –î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."
    )
    await update.callback_query.message.reply_text(faq_text, parse_mode="Markdown")

async def enter_prompt_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º ¬´–ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä¬ª. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞.
    """
    await update.callback_query.answer()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º ¬´prompt¬ª
    context.user_data["mode"] = "prompt"
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ä–æ–ª—å ¬´system¬ª –¥–ª—è ChatGPT)
    context.user_data["prompt_history"] = [
        {"role": "system", "content": "–¢—ã ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π (–ø—Ä–æ–º–ø—Ç–æ–≤) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò (Google Veo3). –ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–¥–µ–π. –û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å."}
    ]
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é
    back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])
    msg = (
        "üí° *–†–µ–∂–∏–º ¬´–ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.* –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é –∏–ª–∏ —á–µ—Ä–Ω–æ–≤–æ–π –ø—Ä–æ–º–ø—Ç, –∞ –±–æ—Ç (ChatGPT) –ø–æ–º–æ–∂–µ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –Ω–µ–≥–æ –æ—Ç–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∏–¥–µ–æ.\n"
        "_–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª._"
    )
    sent_msg = await update.callback_query.message.reply_text(msg, reply_markup=back_button, parse_mode="Markdown")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    context.user_data["mode_msg_id"] = sent_msg.message_id

async def enter_chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å ChatGPT.
    """
    await update.callback_query.answer()
    context.user_data["mode"] = "chat"
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞
    context.user_data["chat_history"] = [
        {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."}
    ]
    back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])
    msg = (
        "ü§ñ *–†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.* –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º (ChatGPT), –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ ChatGPT.\n"
        "_–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª –Ω–∏–∂–µ._"
    )
    sent_msg = await update.callback_query.message.reply_text(msg, reply_markup=back_button, parse_mode="Markdown")
    context.user_data["mode_msg_id"] = sent_msg.message_id

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª. –í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞/–¥–∏–∞–ª–æ–≥–∞ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    await update.callback_query.answer()
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º/—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    context.user_data.clear()
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å –∫–Ω–æ–ø–∫–æ–π)
    try:
        await update.callback_query.edit_message_reply_markup(reply_markup=None)
    except Exception as e:
        logger.debug(f"Failed to edit message on back: {e}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="gen_text")],
        [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ", callback_data="gen_photo")],
        [InlineKeyboardButton("üí≠ –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä (ChatGPT)", callback_data="mode_prompt")],
        [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (ChatGPT)", callback_data="mode_chat")],
        [InlineKeyboardButton("‚ùì FAQ", callback_data="faq"), InlineKeyboardButton("üìà –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url="https://t.me/your_channel")]
    ]
    await update.callback_query.message.reply_text("üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.
    """
    context.user_data.clear()
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start_command(update, context)
    return ConversationHandler.END

async def prompt_text_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    (–ù–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é) –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É.
    """
    return T_PROMPT

async def prompt_photo_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    (–ù–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é) –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —à–∞–≥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ.
    """
    return P_PHOTO

async def gen_text_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.
    """
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "‚úèÔ∏è *–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ.*\n_–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç-–ø—Ä–æ–º–ø—Ç ‚Äî –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω—ã, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏–π._\n\n‚ÑπÔ∏è –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="Markdown"
    )
    return T_PROMPT

async def receive_text_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.
    """
    user_text = update.message.text.strip()
    if not user_text:
        await update.message.reply_text("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –µ—â—ë —Ä–∞–∑.")
        return T_PROMPT
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
    context.user_data["prompt_text"] = user_text
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –≤–∏–¥–µ–æ
    ratio_keyboard = [
        [InlineKeyboardButton("16:9 (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)", callback_data="ratio_16_9")],
        [InlineKeyboardButton("9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)", callback_data="ratio_9_16")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    await update.message.reply_text("üñºÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ* (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω):", reply_markup=InlineKeyboardMarkup(ratio_keyboard), parse_mode="Markdown")
    return T_RATIO

async def gen_photo_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    """
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "üñºÔ∏è *–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ* –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ü–µ–Ω—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n\n‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="Markdown"
    )
    return P_PHOTO

async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ).
    –ï—Å–ª–∏ —É —Ñ–æ—Ç–æ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.
    """
    photo_file_id = None
    # Telegram –ø–µ—Ä–µ–¥–∞—ë—Ç —Ñ–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–Ω–∞–∏–±–æ–ª—å—à–µ–µ)
    if update.message.photo:
        photo_file_id = update.message.photo[-1].file_id
    elif update.message.document and update.message.document.mime_type.startswith("image"):
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏—Å–ª–∞–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–±–µ–∑ —Å–∂–∞—Ç–∏—è)
        photo_file_id = update.message.document.file_id
    else:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return P_PHOTO
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    context.user_data["photo_file_id"] = photo_file_id
    # –ï—Å–ª–∏ —É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—ã–ª–∞ –ø–æ–¥–ø–∏—Å—å (caption), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    prompt_caption = update.message.caption.strip() if update.message.caption else ""
    if prompt_caption:
        context.user_data["prompt_text"] = prompt_caption
        # –ü–æ–ª—É—á–µ–Ω–æ –∏ —Ñ–æ—Ç–æ, –∏ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
        ratio_keyboard = [
            [InlineKeyboardButton("16:9 (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)", callback_data="ratio_16_9")],
            [InlineKeyboardButton("9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)", callback_data="ratio_9_16")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        await update.message.reply_text("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\nüñºÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ*:", reply_markup=InlineKeyboardMarkup(ratio_keyboard), parse_mode="Markdown")
        return P_RATIO
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç)
        await update.message.reply_text(
            "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–ø—Ä–æ–º–ø—Ç) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
            parse_mode="Markdown"
        )
        return P_PROMPT

async def receive_photo_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–∏–ª –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ).
    """
    user_text = update.message.text.strip()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /skip (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ)
    if user_text.lower() in ("/skip", "skip", "/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):
        context.user_data["prompt_text"] = ""
    else:
        if not user_text:
            await update.message.reply_text("‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
            return P_PROMPT
        context.user_data["prompt_text"] = user_text
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    ratio_keyboard = [
        [InlineKeyboardButton("16:9 (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ)", callback_data="ratio_16_9")],
        [InlineKeyboardButton("9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)", callback_data="ratio_9_16")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    await update.message.reply_text("üñºÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ*:", reply_markup=InlineKeyboardMarkup(ratio_keyboard), parse_mode="Markdown")
    return P_RATIO

async def select_ratio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω (16:9 –∏–ª–∏ 9:16) –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —à–∞–≥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    data = query.data
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    aspect_ratio = "16:9" if "16_9" in data else "9:16"
    context.user_data["aspect_ratio"] = aspect_ratio
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    confirm_keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="confirm_start")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–±–∑–æ—Ä –∑–∞–ø—Ä–æ—Å–∞)
    prompt_summary = context.user_data.get("prompt_text", "")
    photo_attached = "photo_file_id" in context.user_data
    summary_text = "‚úÖ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:* \n"
    if prompt_summary:
        summary_text += f"‚Ä¢ *–û–ø–∏—Å–∞–Ω–∏–µ:* {prompt_summary}\n"
    if photo_attached:
        summary_text += "‚Ä¢ –†–µ–∂–∏–º: –≤–∏–¥–µ–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é\n"
    else:
        summary_text += "‚Ä¢ –†–µ–∂–∏–º: –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É\n"
    summary_text += f"‚Ä¢ –§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: {aspect_ratio}\n\n–ù–∞–∂–º–∏—Ç–µ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    await query.edit_message_text(summary_text, reply_markup=InlineKeyboardMarkup(confirm_keyboard), parse_mode="Markdown")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    return T_CONFIRM if not photo_attached else P_CONFIRM

async def start_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ KIE API, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –≤—ã—Å—ã–ª–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É
    await query.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Veo3...")
    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è KIE API
    prompt_text = context.user_data.get("prompt_text", "")
    aspect_ratio = context.user_data.get("aspect_ratio", "16:9")
    payload = {
        "prompt": prompt_text,
        "model": "veo3",
        "aspectRatio": aspect_ratio,
        "enableFallback": True
    }
    if "photo_file_id" in context.user_data:
        # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Telegram API
        file_id = context.user_data["photo_file_id"]
        bot = context.bot
        file = await bot.get_file(file_id)
        file_url = file.file_path  # –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª
        # (KIE —Ç—Ä–µ–±—É–µ—Ç –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π URL; –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL Telegram —Ñ–∞–π–ª–∞)
        payload["imageUrls"] = [file_url]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ API KIE
    def post_request(url, headers, json):
        try:
            return requests.post(url, headers=headers, json=json, timeout=30)
        except Exception as err:
            return err
    headers = {
        "Authorization": f"Bearer {KIE_API_KEY}",
        "Content-Type": "application/json"
    }
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ {KIE_GENERATE_URL}")
    try:
        response = await asyncio.get_running_loop().run_in_executor(None, post_request, KIE_GENERATE_URL, headers, payload)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ KIE: {e}")
        await context.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    if isinstance(response, Exception):
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ KIE: {response}")
        await context.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    try:
        result = response.json()
    except Exception as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç KIE: {e}")
        await context.bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END
    if result.get("code") != 200 or "data" not in result or "taskId" not in result["data"]:
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π
        error_msg = result.get("msg") or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É."
        await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")
        return ConversationHandler.END
    task_id = result["data"]["taskId"]
    logger.info(f"Video generation task created: {task_id}")
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    await context.bot.send_message(chat_id, f"üìÑ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞. ID: `{task_id}`", parse_mode="Markdown")
    await context.bot.send_message(chat_id, "‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥—ë—Ç... ‚è≥")
    status_headers = {"Authorization": f"Bearer {KIE_API_KEY}"}
    success = False
    video_url = None
    error_reason = None
    elapsed = 0
    check_interval = 5
    next_update = 60
    while True:
        # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
        await asyncio.sleep(check_interval)
        elapsed += check_interval
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –¥–æ–ª–≥–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
        if elapsed >= 600:
            error_reason = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
            break
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status_params = {"taskId": task_id}
        def get_status(url, headers, params):
            try:
                return requests.get(url, headers=headers, params=params, timeout=10)
            except Exception as err:
                return err
        status_response = await asyncio.get_running_loop().run_in_executor(None, get_status, KIE_STATUS_URL, status_headers, status_params)
        if isinstance(status_response, Exception):
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {status_response}")
            # –ü—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—ã—Ç–∞—Ç—å—Å—è
            continue
        try:
            status_data = status_response.json()
        except Exception as e:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞, –ø—Ä–æ–ø—É—Å–∫: {e}")
            continue
        if status_data.get("code") != 200 or "data" not in status_data:
            # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            logger.debug(f"–°—Ç–∞—Ç—É—Å-–æ—Ç–≤–µ—Ç: {status_data}")
            continue
        data = status_data["data"]
        success_flag = data.get("successFlag")
        if success_flag == 1:
            # –£—Å–ø–µ—Ö ‚Äì –≤–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
            success = True
            try:
                result_urls = data["response"]["resultUrls"]
                if result_urls:
                    video_url = result_urls[0]
            except KeyError:
                video_url = None
            break
        elif success_flag in (2, 3):
            # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–µ–π
            error_reason = data.get("errorMessage") or "–ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)."
            break
        else:
            # successFlag == 0 (–µ—â—ë –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è)
            if elapsed >= next_update:
                await context.bot.send_message(chat_id, f"‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è... {elapsed} —Å–µ–∫")
                next_update += 60
            continue
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ª–∏–±–æ —É—Å–ø–µ—Ö, –ª–∏–±–æ –æ—à–∏–±–∫–∞
    if success and video_url:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∫–∞–∫ —Ñ–∞–π–ª –ø–æ –ø—Ä—è–º–æ–º—É URL
        try:
            await context.bot.send_video(chat_id, video=video_url, caption="üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ URL: {e}. –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª...")
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ URL –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
            def download_video(url):
                return requests.get(url, timeout=120)
            vid_resp = await asyncio.get_running_loop().run_in_executor(None, download_video, video_url)
            if vid_resp and vid_resp.status_code == 200:
                await context.bot.send_video(chat_id, video=vid_resp.content, filename="veo_video.mp4", caption="üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!")
            else:
                await context.bot.send_message(chat_id, "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ.")
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        await context.bot.send_message(chat_id, "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /start")
    else:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (–∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è)
        await context.bot.send_message(chat_id, f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–∏—á–∏–Ω–∞: {error_reason or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}")
        await context.bot.send_message(chat_id, "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é.")
    return ConversationHandler.END

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞ (Prompt-master –∏–ª–∏ –û–±—ã—á–Ω—ã–π —á–∞—Ç).
    """
    mode = context.user_data.get("mode")
    if mode not in ("prompt", "chat"):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç –≤–Ω–µ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Ä–µ–∂–∏–º–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /start
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.")
        return
    user_text = update.message.text.strip()
    if not user_text:
        return  # –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == "prompt":
        history = context.user_data.get("prompt_history", [])
    else:  # mode == "chat"
        history = context.user_data.get("chat_history", [])
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "user", "content": user_text})
    # –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI Chat Completion API
    api_url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-3.5-turbo",
        "messages": history
    }
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞)
    def ask_openai(url, headers, payload):
        try:
            return requests.post(url, headers=headers, json=payload, timeout=20)
        except Exception as err:
            return err
    response = await asyncio.get_running_loop().run_in_executor(None, ask_openai, api_url, headers, data)
    if isinstance(response, Exception):
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {response}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ)
        history.pop()
        return
    try:
        result = response.json()
        assistant_msg = result["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ OpenAI: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT.")
        history.pop()
        return
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    history.append({"role": "assistant", "content": assistant_msg})
    await update.message.reply_text(assistant_msg)

def main() -> None:
    logger.info(f"KIE endpoint: {KIE_GENERATE_URL}")
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–±–æ—Ç–∞) –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã /start –∏ /help
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", start_command))
    # –î–∏–∞–ª–æ–≥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    conv_text = ConversationHandler(
        entry_points=[CallbackQueryHandler(gen_text_entry, pattern="^gen_text$")],
        states={
            T_PROMPT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_text_prompt),
                       CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")],
            T_RATIO: [CallbackQueryHandler(select_ratio, pattern="^ratio_"),
                      CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")],
            T_CONFIRM: [CallbackQueryHandler(start_generation, pattern="^confirm_start$"),
                        CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")]
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
        allow_reentry=False
    )
    conv_photo = ConversationHandler(
        entry_points=[CallbackQueryHandler(gen_photo_entry, pattern="^gen_photo$")],
        states={
            P_PHOTO: [MessageHandler(~filters.COMMAND, receive_photo),
                      CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")],
            P_PROMPT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_photo_prompt),
                       CommandHandler("skip", receive_photo_prompt),
                       CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")],
            P_RATIO: [CallbackQueryHandler(select_ratio, pattern="^ratio_"),
                      CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")],
            P_CONFIRM: [CallbackQueryHandler(start_generation, pattern="^confirm_start$"),
                        CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")]
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
        allow_reentry=False
    )
    app.add_handler(conv_text)
    app.add_handler(conv_photo)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º—ã ChatGPT –∏ FAQ
    app.add_handler(CallbackQueryHandler(enter_prompt_mode, pattern="^mode_prompt$"))
    app.add_handler(CallbackQueryHandler(enter_chat_mode, pattern="^mode_chat$"))
    app.add_handler(CallbackQueryHandler(faq_callback, pattern="^faq$"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª –≤–Ω–µ –¥–∏–∞–ª–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ä–µ–∂–∏–º–∞—Ö —á–∞—Ç–∞)
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å GPT)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–æ–ª–≥–æ–ø—Ä–æ—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    app.run_polling()

if __name__ == "__main__":
    main()

# Initialize and run the bot (not shown here, ensure to add handlers and call app.run_polling())
