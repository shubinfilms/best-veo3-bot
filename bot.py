# -*- coding: utf-8 -*-
# BEST VEO3 BOT ‚Äî —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è + Prompt-Master + –≤–æ–∑–≤—Ä–∞—Ç –≤–∏–¥–µ–æ
# –í–ê–ñ–ù–û: –ª–æ–≥–∏–∫–∞ UI/Prompt-Master/—á–∞—Ç–∞ –Ω–µ —Ç—Ä–æ–Ω—É—Ç–∞. –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª–ª–∏–Ω–≥ Kie –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∏–¥–µ–æ.

import os, json, logging, traceback, requests, asyncio
from typing import Optional, Dict, Any

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ======================= ENV & LOG =======================
load_dotenv()

TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY", "") or os.getenv("OPENAI_KEY", "")
KIE_API_KEY     = os.getenv("KIE_API_KEY", "")

# –ë–ê–ó–ê –∏ –ü—É—Ç–∏ (–æ—Å—Ç–∞–≤–ª—è–π –∫–∞–∫ —É —Ç–µ–±—è, –≥–ª–∞–≤–Ω–æ–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–≤–æ–π–Ω—ã—Ö —Å–ª—ç—à–µ–π)
KIE_BASE_URL    = (os.getenv("KIE_BASE_URL") or "https://api.kie.ai").strip().rstrip("/")
KIE_GEN_PATH    = (os.getenv("KIE_GEN_PATH") or os.getenv("KIE_GENERATE_PATH") or "/api/v1/veo/generate").strip()
KIE_DETAIL_PATH = (os.getenv("KIE_DETAIL_PATH") or "/api/v1/veo/video/detail").strip()  # –ù–û–í–û–ï

LOG_LEVEL = (os.getenv("LOG_LEVEL") or "INFO").upper()
logging.basicConfig(level=getattr(logging, LOG_LEVEL, logging.INFO),
                    format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("best-veo3")

def _url_join(base: str, path: str) -> str:
    base = base.rstrip("/")
    if not path.startswith("/"): path = "/" + path
    url = base + path
    # –Ω–∞ –≤—Å—è–∫–∏–π –ø–æ–∂–∞—Ä–Ω—ã–π —É–±–µ—Ä—ë–º –¥–≤–æ–π–Ω—ã–µ // –∫—Ä–æ–º–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    return url.replace("://", "¬ß¬ß").replace("//", "/").replace("¬ß¬ß", "://")

log.info(f"KIE endpoint (create): {_url_join(KIE_BASE_URL, KIE_GEN_PATH)}")
log.info(f"KIE endpoint (detail): {_url_join(KIE_BASE_URL, KIE_DETAIL_PATH)}")

# ======================= UI =======================
MAIN_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="gen_text")],
    [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ",  callback_data="gen_photo")],
    [InlineKeyboardButton("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä (ChatGPT)",       callback_data="prompt_master")],
    [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (ChatGPT)",         callback_data="chat")],
    [InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
     InlineKeyboardButton("üìö –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url="https://t.me/bestveo3promts")],
])

FORMAT_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("16:9", callback_data="fmt_16x9"),
     InlineKeyboardButton("9:16", callback_data="fmt_9x16")],
])

RUN_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="run")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")],
])

def state(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    if "state" not in ctx.user_data:
        ctx.user_data["state"] = {
            "mode": None,            # gen_text | gen_photo | prompt_master | chat
            "aspect": "16:9",
            "last_prompt": None,     # —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Veo3
            "last_image_url": None,  # Telegram file URL –¥–ª—è —Ñ–æ—Ç–æ-—Ä–µ–∂–∏–º–∞
            "chat_history": [],
            "_typing_stop": None     # asyncio.Event –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞
        }
    return ctx.user_data["state"]

# ======================= Heuristics =======================
def looks_like_ready_prompt(text: str) -> bool:
    if not text: return False
    if text.strip().startswith("{") and "}" in text:
        return True
    score = 0
    for kw in ["fps","anamorphic","85mm","35mm","lens","DOF","bokeh","rack focus",
               "color palette","lighting","camera","glide","push-in","tone","sound",
               "\"shot\"","\"scene\"","\"audio\"","cinematic"]:
        if kw.lower() in text.lower():
            score += 1
    return score >= 3 or len(text) > 400

# ======================= OpenAI (Prompt-Master) =======================
def oai_chat(messages, temperature=0.7, max_tokens=900) -> str:
    # –í–ê–ñ–ù–û: —É —Ç–µ–±—è —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openai==0.28.1 ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—é.
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω.")
    import openai
    openai.api_key = OPENAI_API_KEY
    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens,
    )
    return resp.choices[0].message["content"].strip()

SYSTEM_PM = {
    "role": "system",
    "content": (
        "–¢—ã ‚Äî —Ä–µ–∂–∏—Å—Å—ë—Ä-–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫/–ø—Ä–æ–º–ø—Ç-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –¥–ª—è Veo3. "
        "–ù–µ –º–µ–Ω—è–π –∏–¥–µ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Å–∏–ª–∏–≤–∞–π –µ—ë: –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –æ–ø—Ç–∏–∫–∞ (–º–º/–∞–Ω–∞–º–æ—Ä—Ñ), "
        "–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (push-in, dolly, glide, rack focus), —Å–≤–µ—Ç/–ø–∞–ª–∏—Ç—Ä–∞, —Ç–µ–º–ø/—Ä–∏—Ç–º, "
        "–º–∏–∫—Ä–æ-–¥–µ—Ç–∞–ª–∏ (–ø—ã–ª—å, –ø–∞—Ä, –±–ª–∏–∫–∏), –∑–≤—É–∫ (–º—É–∑—ã–∫–∞/—à—É–º/–º–∏–∫—Å). "
        "–ü–∏—à–∏ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ, –∂–∏–≤—ã–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º, 3‚Äì6 –∞–±–∑–∞—Ü–µ–≤ (‚âà500‚Äì900 —Å–∏–º–≤.). "
        "–ë–µ–∑ –≤–æ–¥—ã, –±—Ä–µ–Ω–¥–æ–≤/–ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤."
    )
}

# ======================= Kie / Veo3 =======================
def _submit_kie(payload: dict) -> dict:
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ Kie. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {ok,id,error}."""
    if not (KIE_API_KEY and KIE_BASE_URL):
        return {"ok": False, "id": None, "error": "KIE_API_KEY –∏–ª–∏ KIE_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω—ã."}

    # –º–æ–¥–µ–ª—å –ù–ï —Ç—Ä–æ–≥–∞—é (–∫–∞–∫ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ) ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å/–Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ payload
    url = _url_join(KIE_BASE_URL, KIE_GEN_PATH)
    headers = {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type":"application/json"}

    try:
        log.info(f"KIE POST -> {url} | payload: {{'aspect_ratio':'{payload.get('aspect_ratio')}', "
                 f"'image_url':{'yes' if payload.get('image_url') else 'no'}, 'prompt_len':{len(payload.get('prompt',''))}}}")
        r = requests.post(url, headers=headers, data=json.dumps(payload), timeout=60)
        txt = r.text

        if r.status_code == 200:
            try:
                data = r.json()
            except Exception:
                data = {}
            # –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ id
            tid = data.get("taskid") or data.get("task_id") or data.get("id") or data.get("data", {}).get("taskid")
            if tid:
                return {"ok": True, "id": str(tid), "error": None}
            # –µ—Å–ª–∏ 200, –Ω–æ –±–µ–∑ id ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω—ë–º —Ç–µ–ª–æ
            return {"ok": False, "id": None, "error": f"No task id in response: {txt[:300]}"}

        if r.status_code == 402:
            return {"ok": False, "id": None, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Kie –∞–∫–∫–∞—É–Ω—Ç–µ."}
        if "Illegal IP" in txt or r.status_code in (401,403):
            return {"ok": False, "id": None, "error": "–î–æ—Å—Ç—É–ø API –∑–∞–ø—Ä–µ—â—ë–Ω: IP –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ –≤ whitelist Kie."}
        return {"ok": False, "id": None, "error": f"API {r.status_code}: {txt[:300]}"}

    except Exception as e:
        return {"ok": False, "id": None, "error": f"Network error: {e}"}

def _get_kie_status(task_id: str) -> dict:
    """
    –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–Ω–¥–µ—Ä–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {"ok": bool, "status": "...", "result_urls": [..] or None, "error": str|None}
    –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤/–ø–æ–ª–µ–π ‚Äî —É Kie –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ—Ç–ª–∏—á–∏—è.
    """
    headers = {"Authorization": f"Bearer {KIE_API_KEY}", "Content-Type": "application/json"}
    candidates = [
        (KIE_DETAIL_PATH, {"taskid": task_id}),                         # POST JSON
        (KIE_DETAIL_PATH, {"taskId": task_id}),
        (f"{KIE_DETAIL_PATH}?taskid={task_id}", None),                  # GET
        (f"{KIE_DETAIL_PATH}?taskId={task_id}", None),
        ("/api/v1/veo/detail", {"taskid": task_id}),                    # –∑–∞–ø–∞—Å–Ω—ã–µ
        ("/api/veo/detail", {"taskid": task_id}),
    ]

    for path, payload in candidates:
        try:
            url = _url_join(KIE_BASE_URL, path)
            if payload is None:
                r = requests.get(url, headers=headers, timeout=30)
            else:
                r = requests.post(url, headers=headers, data=json.dumps(payload), timeout=30)
            if r.status_code != 200:
                continue

            ctype = r.headers.get("Content-Type","")
            data = r.json() if "application/json" in ctype else {}

            status = (data.get("status") or data.get("state") or data.get("taskStatus") or "").lower()
            # –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞, –∫—É–¥–∞ –∫–ª–∞–¥—É—Ç —Å—Å—ã–ª–∫–∏
            result_urls = (
                data.get("result_urls")
                or data.get("result")
                or data.get("data", {}).get("result_urls")
                or data.get("data", {}).get("result")
            )

            if isinstance(result_urls, str):
                result_urls = [result_urls]

            # —è–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–¥–æ–º
            code = str(data.get("code", 0))
            if code not in ("0", "200") and data.get("code") is not None:
                return {"ok": False, "status": status or "failed", "result_urls": None,
                        "error": f"API code {data.get('code')}: {data.get('msg') or data.get('message')}"}

            return {"ok": True, "status": status or "unknown",
                    "result_urls": result_urls, "error": None}
        except Exception:
            continue

    return {"ok": False, "status": "unknown", "result_urls": None, "error": "No status endpoint matched"}

async def _poll_and_send(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, task_id: str, aspect: str):
    """–û–ø—Ä–∞—à–∏–≤–∞–µ–º Kie —Ä–∞–∑ –≤ ~15 —Å–µ–∫ –¥–æ ~12 –º–∏–Ω. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –µ—Å—Ç—å URL ‚Äî —à–ª—ë–º –≤–∏–¥–µ–æ."""
    tries, delay = 50, 15
    info_msg = await ctx.bot.send_message(chat_id, "üéûÔ∏è –†–µ–Ω–¥–µ—Ä–∏–º –≤–∏–¥–µ–æ‚Ä¶ —è —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.")

    for _ in range(tries):
        await asyncio.sleep(delay)
        st = _get_kie_status(task_id)

        if st["ok"] and (st["status"] in ("failed", "error")):
            await info_msg.edit_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Kie.")
            return

        urls = st.get("result_urls") or []
        if urls:
            url = urls[0]
            try:
                await info_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ‚Ä¶")
                await ctx.bot.send_video(chat_id, video=url, caption=f"–ì–æ—Ç–æ–≤–æ ({aspect}).")
            except Exception:
                try:
                    await ctx.bot.send_document(chat_id, document=url, caption=f"–ì–æ—Ç–æ–≤–æ ({aspect}).")
                except:
                    await ctx.bot.send_message(chat_id, f"‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ:\n{url}")
            return

    await info_msg.edit_text("‚åõ –í–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ======================= Typing indicator (–∫–∞–∫ –±—ã–ª–æ) =======================
async def _typing_loop(chat_id: int, ctx: ContextTypes.DEFAULT_TYPE, stop_event: asyncio.Event):
    try:
        while not stop_event.is_set():
            await ctx.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(4)
    except Exception:
        pass

# ======================= Handlers =======================
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx); st["mode"] = None
    await update.effective_chat.send_message(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Google Veo3. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∏–∂–µ –∏ —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥—Ä–∞.",
        reply_markup=MAIN_MENU
    )
    await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=FORMAT_KB)

async def cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    st = state(ctx); data = q.data
    chat_id = q.message.chat.id

    if data == "back_menu":
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU); return

    if data.startswith("fmt_"):
        st["aspect"] = "16:9" if data=="fmt_16x9" else "9:16"
        await q.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {st['aspect']}.", reply_markup=RUN_KB); return

    if data == "gen_text":
        st["mode"] = "gen_text"; st["last_image_url"] = None
        await q.edit_message_text(
            "‚úçÔ∏è –ü—Ä–∏—à–ª–∏ –∏–¥–µ—é **–∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç**. "
            "–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –º—ã –Ω–µ —ç—Ö–æ-–¥—É–±–ª–∏—Ä—É–µ–º ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫ –∑–∞–ø—É—Å–∫—É.",
            reply_markup=FORMAT_KB
        ); return

    if data == "gen_photo":
        st["mode"] = "gen_photo"
        await q.edit_message_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ **—Ñ–æ—Ç–æ** —Å –ø–æ–¥–ø–∏—Å—å—é (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ). "
            "–ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∞ –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=FORMAT_KB
        ); return

    if data == "prompt_master":
        st["mode"] = "prompt_master"; st["last_image_url"] = None
        await q.edit_message_text(
            "üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä –≤–∫–ª—é—á—ë–Ω. –û–ø–∏—à–∏ –∏–¥–µ—é 1‚Äì2 —Ñ—Ä–∞–∑–∞–º–∏ ‚Äî **–Ω–∞—á–Ω—É –ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç —Å—Ä–∞–∑—É**.",
            reply_markup=FORMAT_KB
        ); return

    if data == "chat":
        st["mode"] = "chat"
        await q.edit_message_text("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç. –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. /exit ‚Äî –≤—ã—Ö–æ–¥.", reply_markup=RUN_KB); return

    if data == "faq":
        await q.edit_message_text(
            "üìñ FAQ\n‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: https://t.me/bestveo3promts\n‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: 16:9 –∏ 9:16\n"
            "‚Ä¢ –†–µ–Ω–¥–µ—Ä –æ–±—ã—á–Ω–æ 2‚Äì5 –º–∏–Ω.\n‚Ä¢ –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞/–ª–æ–≥–æ—Ç–∏–ø–æ–≤ –≤ –∫–∞–¥—Ä–µ.",
            reply_markup=RUN_KB
        ); return

    if data == "run":
        if st["last_prompt"] is None:
            await q.answer("–ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.", show_alert=True); return

        await q.edit_message_text("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Veo3‚Ä¶")
        if st["mode"] == "gen_photo" and st.get("last_image_url"):
            payload = {"prompt": st["last_prompt"], "image_url": st["last_image_url"],
                       "aspect_ratio": "16:9" if st["aspect"] == "16:9" else "9:16"}
        else:
            payload = {"prompt": st["last_prompt"],
                       "aspect_ratio": "16:9" if st["aspect"] == "16:9" else "9:16"}

        res = _submit_kie(payload)
        if res["ok"]:
            task_id = res["id"]
            await q.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: `{task_id}`\n–û–±—ã—á–Ω–æ —Ä–µ–Ω–¥–µ—Ä 2‚Äì5 –º–∏–Ω—É—Ç.",
                parse_mode=ParseMode.MARKDOWN, reply_markup=RUN_KB
            )
            # –í–ê–ñ–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω-–ø–æ–ª–ª–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –≤–µ—Ä–Ω—ë–º –≤–∏–¥–µ–æ –∫–∞–∫ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.
            asyncio.create_task(_poll_and_send(ctx, chat_id, task_id, st["aspect"]))
        else:
            msg = res["error"] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
            if "whitelist" in msg or "IP" in msg:
                msg += "\n\n‚öôÔ∏è –ê–¥–º–∏–Ω—É: –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ö–æ–¥—è—â–∏–µ IP Render –≤ whitelist Kie."
            await q.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:\n{msg}", reply_markup=RUN_KB)
        return

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx); text = (update.message.text or "").strip()
    chat_id = update.effective_chat.id

    # CHAT —Ä–µ–∂–∏–º (–∫–∞–∫ –±—ã–ª–æ)
    if st["mode"] == "chat":
        try:
            st["chat_history"] = st.get("chat_history", [])[-8:]
            st["chat_history"].append({"role":"user","content": text})
            answer = oai_chat([{"role":"system","content":"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."}] +
                              st["chat_history"], temperature=0.6, max_tokens=500)
            st["chat_history"].append({"role":"assistant","content": answer})
            await update.message.reply_text(answer)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
        return

    # PROMPT-MASTER (–∫–∞–∫ –±—ã–ª–æ)
    if st["mode"] == "prompt_master":
        notice = await update.message.reply_text("‚åõ –ù–∞—á–∏–Ω–∞—é –ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç‚Ä¶")
        st["_typing_stop"] = asyncio.Event()
        asyncio.create_task(_typing_loop(chat_id, ctx, st["_typing_stop"]))
        try:
            prompt = oai_chat([SYSTEM_PM, {"role":"user","content": text}], temperature=0.7, max_tokens=900)
            st["last_prompt"] = prompt
            st["_typing_stop"].set()
            await notice.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
                                   reply_markup=RUN_KB)
        except Exception as e:
            st["_typing_stop"].set()
            await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

    # GENERATE BY TEXT / PHOTO (–∫–∞–∫ –±—ã–ª–æ)
    if st["mode"] in (None, "gen_text", "gen_photo"):
        if st["mode"] == "gen_photo" and not st.get("last_image_url"):
            await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é).")
            return

        if looks_like_ready_prompt(text):
            st["last_prompt"] = text
            await update.message.reply_text("‚úÖ –ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º–ø—Ç. –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.", reply_markup=RUN_KB)
            return

        notice = await update.message.reply_text("‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç‚Ä¶")
        st["_typing_stop"] = asyncio.Event()
        asyncio.create_task(_typing_loop(chat_id, ctx, st["_typing_stop"]))
        try:
            prompt = oai_chat([SYSTEM_PM, {"role":"user","content": text}], temperature=0.7, max_tokens=900)
            st["last_prompt"] = prompt
            st["_typing_stop"].set()
            await notice.edit_text("‚úÖ –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
                                   reply_markup=RUN_KB)
        except Exception as e:
            st["_typing_stop"].set()
            await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = state(ctx); chat_id = update.effective_chat.id
    try:
        photo = update.message.photo[-1]
        f = await ctx.bot.get_file(photo.file_id)
        image_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{f.file_path}"
        st["last_image_url"] = image_url

        caption = (update.message.caption or "").strip()
        if caption:
            notice = await update.message.reply_text("üì∏ –ü—Ä–∏–Ω—è–ª —Ñ–æ—Ç–æ. ‚åõ –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç‚Ä¶")
            st["_typing_stop"] = asyncio.Event()
            asyncio.create_task(_typing_loop(chat_id, ctx, st["_typing_stop"]))
            try:
                prompt = oai_chat([SYSTEM_PM, {"role":"user","content": caption}], temperature=0.7, max_tokens=900)
                st["last_prompt"] = prompt
                st["_typing_stop"].set()
                await notice.edit_text("‚úÖ –§–æ—Ç–æ –∏ –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤—ã. –ù–∞–∂–º–∏ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
                                       reply_markup=RUN_KB)
            except Exception as e:
                st["_typing_stop"].set()
                await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        else:
            await update.message.reply_text(
                "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ **–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã** ‚Äî —è –¥–æ—Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–º–ø—Ç.",
                reply_markup=RUN_KB
            )
            st["mode"] = "gen_photo"
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}")

async def exit_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text("–í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await start(update, ctx)

async def error_handler(update: Optional[Update], ctx: ContextTypes.DEFAULT_TYPE):
    log.error("Exception:\n%s", traceback.format_exc())
    try:
        if update and update.effective_chat:
            await update.effective_chat.send_message("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except:
        pass

# ======================= MAIN =======================
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("exit", exit_cmd))

    app.add_handler(CallbackQueryHandler(
        cb,
        pattern=r"^(gen_text|gen_photo|prompt_master|chat|faq|run|back_menu|fmt_16x9|fmt_9x16)$"
    ))

    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.add_error_handler(error_handler)
    log.info("Bot started.")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
